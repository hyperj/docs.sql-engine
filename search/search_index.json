{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u57fa\u4e8e Spark SQL 2.x \u8fdb\u884c\u6574\u7406\uff0c\u53c2\u8003\u4e3b\u6d41\u5206\u5e03\u5f0f SQL \u8ba1\u7b97\u5f15\u64ce\u76f8\u5173\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u4ee5\u4e0b\u4e3a\u4e3b\u8981\u53c2\u8003\u7684\u9879\u76ee\uff1a Spark Core\uff08RDD APIs\uff09\u3001Data Source Connectors Catalyst Optimization\u3001 Tungsten Execution SparkSession\u3001Dataset/DataFrame APIs\u3001SQL Structured Streaming\u3001MLlib\u3001GraphFrame\u3001TensorFrames Reference Spark SQL : Spark SQL is Apache Spark's module for working with structured data. Hive : The Apache Hive \u2122 data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Structure can be projected onto data already in storage. A command line tool and JDBC driver are provided to connect users to Hive. Presto : Distributed SQL Query Engine for Big Data.","title":"Home"},{"location":"#introduction","text":"\u57fa\u4e8e Spark SQL 2.x \u8fdb\u884c\u6574\u7406\uff0c\u53c2\u8003\u4e3b\u6d41\u5206\u5e03\u5f0f SQL \u8ba1\u7b97\u5f15\u64ce\u76f8\u5173\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u4ee5\u4e0b\u4e3a\u4e3b\u8981\u53c2\u8003\u7684\u9879\u76ee\uff1a Spark Core\uff08RDD APIs\uff09\u3001Data Source Connectors Catalyst Optimization\u3001 Tungsten Execution SparkSession\u3001Dataset/DataFrame APIs\u3001SQL Structured Streaming\u3001MLlib\u3001GraphFrame\u3001TensorFrames","title":"Introduction"},{"location":"#reference","text":"Spark SQL : Spark SQL is Apache Spark's module for working with structured data. Hive : The Apache Hive \u2122 data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Structure can be projected onto data already in storage. A command line tool and JDBC driver are provided to connect users to Hive. Presto : Distributed SQL Query Engine for Big Data.","title":"Reference"},{"location":"appendix-a/","text":"\u9644\u5f55A\uff08Appendix A\uff09 Application -1:1- Session(Context) -1:n- Job -1:n- Stage \u4f9d\u8d56\u5355\u5143 Task \u6267\u884c\u5355\u5143 -1:1- Partition \u8ba1\u7b97\u5355\u5143 -1:n- Block \u5b58\u50a8\u5355\u5143 Configuration Application Properties \u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.driver.memory - 1g 2g, 4g Driver \u5185\u5b58 spark.driver.cores - 1 2, 4 Driver \u6838\u6570 spark.executor.memory - 1g 4g, 16g Executor \u5185\u5b58 spark.executor.cores - 1 2, 8 Executor \u6838\u6570 Runtime Environment Shuffle Behavior Compression and Serialization Memory Management Execution Behavior Networking Scheduling Dynamic Allocation Spark SQL \u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.sql.shuffle.partitions - 200 20, 400 Shuffle\u5206\u533a\u6570\u91cf\uff08Join\u3001Aggr\uff09 spark.sql.autoBroadcastJoinThreshold - 10L * 1024 * 1024 (32, 64) * 1024 * 1024 \u81ea\u52a8\u4f18\u5316\u4e3aBroadcastJoin\u9608\u503c spark.sql.adaptive.enabled - false true \u81ea\u9002\u5e94\u67e5\u8be2\u6267\u884c\uff08Broadcast\u3001Partition\u3001Skew\uff09 spark.sql.adaptive.shuffle.targetPostShuffleInputSize - 64 * 1024 * 1024 (32, 128) * 1024 * 1024 Shuffle\u8bfb\u53d6\u6587\u4ef6\u5927\u5c0f spark.sql.adaptive.minNumPostShufflePartitions - -1 10, 200 Shuffle\u6700\u5c0f\u5206\u533a\u6570\u91cf Yarn Hive \u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 hive.exec.dynamic.partition - false true \u5141\u8bb8\u52a8\u6001\u5206\u533a hive.exec.dynamic.partition.mode - strict nonstrict \u52a8\u6001\u5206\u533a\u6a21\u5f0f hive.exec.max.dynamic.partitions - 1000 100-1000 \u5141\u8bb8\u521b\u5efa\u6700\u5927\u5206\u533a\u6570 MapReduce HDFS JVM Reference Spark Configuration SQLConf.scala","title":"Appendix A"},{"location":"appendix-a/#aappendix-a","text":"Application -1:1- Session(Context) -1:n- Job -1:n- Stage \u4f9d\u8d56\u5355\u5143 Task \u6267\u884c\u5355\u5143 -1:1- Partition \u8ba1\u7b97\u5355\u5143 -1:n- Block \u5b58\u50a8\u5355\u5143","title":"\u9644\u5f55A\uff08Appendix A\uff09"},{"location":"appendix-a/#configuration","text":"","title":"Configuration"},{"location":"appendix-a/#application-properties","text":"\u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.driver.memory - 1g 2g, 4g Driver \u5185\u5b58 spark.driver.cores - 1 2, 4 Driver \u6838\u6570 spark.executor.memory - 1g 4g, 16g Executor \u5185\u5b58 spark.executor.cores - 1 2, 8 Executor \u6838\u6570","title":"Application Properties"},{"location":"appendix-a/#runtime-environment","text":"","title":"Runtime Environment"},{"location":"appendix-a/#shuffle-behavior","text":"","title":"Shuffle Behavior"},{"location":"appendix-a/#compression-and-serialization","text":"","title":"Compression and Serialization"},{"location":"appendix-a/#memory-management","text":"","title":"Memory Management"},{"location":"appendix-a/#execution-behavior","text":"","title":"Execution Behavior"},{"location":"appendix-a/#networking","text":"","title":"Networking"},{"location":"appendix-a/#scheduling","text":"","title":"Scheduling"},{"location":"appendix-a/#dynamic-allocation","text":"","title":"Dynamic Allocation"},{"location":"appendix-a/#spark-sql","text":"\u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.sql.shuffle.partitions - 200 20, 400 Shuffle\u5206\u533a\u6570\u91cf\uff08Join\u3001Aggr\uff09 spark.sql.autoBroadcastJoinThreshold - 10L * 1024 * 1024 (32, 64) * 1024 * 1024 \u81ea\u52a8\u4f18\u5316\u4e3aBroadcastJoin\u9608\u503c spark.sql.adaptive.enabled - false true \u81ea\u9002\u5e94\u67e5\u8be2\u6267\u884c\uff08Broadcast\u3001Partition\u3001Skew\uff09 spark.sql.adaptive.shuffle.targetPostShuffleInputSize - 64 * 1024 * 1024 (32, 128) * 1024 * 1024 Shuffle\u8bfb\u53d6\u6587\u4ef6\u5927\u5c0f spark.sql.adaptive.minNumPostShufflePartitions - -1 10, 200 Shuffle\u6700\u5c0f\u5206\u533a\u6570\u91cf","title":"Spark SQL"},{"location":"appendix-a/#yarn","text":"","title":"Yarn"},{"location":"appendix-a/#hive","text":"\u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 hive.exec.dynamic.partition - false true \u5141\u8bb8\u52a8\u6001\u5206\u533a hive.exec.dynamic.partition.mode - strict nonstrict \u52a8\u6001\u5206\u533a\u6a21\u5f0f hive.exec.max.dynamic.partitions - 1000 100-1000 \u5141\u8bb8\u521b\u5efa\u6700\u5927\u5206\u533a\u6570","title":"Hive"},{"location":"appendix-a/#mapreduce","text":"","title":"MapReduce"},{"location":"appendix-a/#hdfs","text":"","title":"HDFS"},{"location":"appendix-a/#jvm","text":"","title":"JVM"},{"location":"appendix-a/#reference","text":"Spark Configuration SQLConf.scala","title":"Reference"},{"location":"appendix-b/","text":"\u9644\u5f55B\uff08Appendix B\uff09 Manual DDL (Data Definition Language) CREATE/DROP/ALTER/TRUNCATE/SHOW/DESCRIBE DATABASE/TABLE/COLUMN/VIEW/ INDEX/MACRO /FUNCTION DML (Data Manipulation Language) LOAD/INSERT/ UPDATE/DELETE/MERGE IMPORT/EXPORT EXPLAIN DQL (Data Query Language) SELECT DCL (Data Control Language) GRANT/REVOKE ROLE/PRIVILEGE DTL (Data Transaction Language) LOCKS/TRANSACTIONS/COMPACTIONS Functions from_json from_json(jsonStr, schema[, options]) - Returns a struct value with the given jsonStr and schema. Examples: SELECT from_json ( { a :1, b :0.8} , a INT, b DOUBLE ); { a : 1 , b : 0 . 8 } SELECT from_json ( { time : 26/08/2015 } , time Timestamp , map ( timestampFormat , dd/MM/yyyy )); { time : 2015-08-26 00:00:00.0 } Since: 2.2.0 to_json to_json(expr[, options]) - Returns a json string with a given struct value Examples: SELECT to_json ( named_struct ( a , 1 , b , 2 )); { a : 1 , b : 2 } SELECT to_json ( named_struct ( time , to_timestamp ( 2015-08-26 , yyyy-MM-dd )), map ( timestampFormat , dd/MM/yyyy )); { time : 26/08/2015 } SELECT to_json ( array ( named_struct ( a , 1 , b , 2 )); [ { a : 1 , b : 2 } ] SELECT to_json ( map ( a , named_struct ( b , 1 ))); { a : { b : 1 }} SELECT to_json ( map ( named_struct ( a , 1 ), named_struct ( b , 2 ))); { [1] : { b : 2 }} SELECT to_json ( map ( a , 1 )); { a : 1 } SELECT to_json ( array (( map ( a , 1 )))); [ { a : 1 } ] Since: 2.2.0 Reference Spark SQL, Built-in Functions","title":"Appendix B"},{"location":"appendix-b/#bappendix-b","text":"","title":"\u9644\u5f55B\uff08Appendix B\uff09"},{"location":"appendix-b/#manual","text":"","title":"Manual"},{"location":"appendix-b/#ddl-data-definition-language","text":"CREATE/DROP/ALTER/TRUNCATE/SHOW/DESCRIBE DATABASE/TABLE/COLUMN/VIEW/ INDEX/MACRO /FUNCTION","title":"DDL (Data Definition Language)"},{"location":"appendix-b/#dml-data-manipulation-language","text":"LOAD/INSERT/ UPDATE/DELETE/MERGE IMPORT/EXPORT EXPLAIN","title":"DML (Data Manipulation Language)"},{"location":"appendix-b/#dql-data-query-language","text":"SELECT","title":"DQL (Data Query Language)"},{"location":"appendix-b/#dcl-data-control-language","text":"GRANT/REVOKE ROLE/PRIVILEGE","title":"DCL (Data Control Language)"},{"location":"appendix-b/#dtl-data-transaction-language","text":"LOCKS/TRANSACTIONS/COMPACTIONS","title":"DTL (Data Transaction Language)"},{"location":"appendix-b/#functions","text":"","title":"Functions"},{"location":"appendix-b/#from_json","text":"from_json(jsonStr, schema[, options]) - Returns a struct value with the given jsonStr and schema. Examples: SELECT from_json ( { a :1, b :0.8} , a INT, b DOUBLE ); { a : 1 , b : 0 . 8 } SELECT from_json ( { time : 26/08/2015 } , time Timestamp , map ( timestampFormat , dd/MM/yyyy )); { time : 2015-08-26 00:00:00.0 } Since: 2.2.0","title":"from_json"},{"location":"appendix-b/#to_json","text":"to_json(expr[, options]) - Returns a json string with a given struct value Examples: SELECT to_json ( named_struct ( a , 1 , b , 2 )); { a : 1 , b : 2 } SELECT to_json ( named_struct ( time , to_timestamp ( 2015-08-26 , yyyy-MM-dd )), map ( timestampFormat , dd/MM/yyyy )); { time : 26/08/2015 } SELECT to_json ( array ( named_struct ( a , 1 , b , 2 )); [ { a : 1 , b : 2 } ] SELECT to_json ( map ( a , named_struct ( b , 1 ))); { a : { b : 1 }} SELECT to_json ( map ( named_struct ( a , 1 ), named_struct ( b , 2 ))); { [1] : { b : 2 }} SELECT to_json ( map ( a , 1 )); { a : 1 } SELECT to_json ( array (( map ( a , 1 )))); [ { a : 1 } ] Since: 2.2.0","title":"to_json"},{"location":"appendix-b/#reference","text":"Spark SQL, Built-in Functions","title":"Reference"},{"location":"case/","text":"SQL Case Case 1 select * from girls where age between 18 and 24 and boyfriend = no SELECT name , phone , avatar FROM users WHERE gender = 2 AND age IN ( 18 , 19 , 20 , 21 , 22 , 23 , 24 ) AND sense = 1 Case 2 Case 3 Reference","title":"Case"},{"location":"case/#sql-case","text":"","title":"SQL Case"},{"location":"case/#case-1","text":"select * from girls where age between 18 and 24 and boyfriend = no SELECT name , phone , avatar FROM users WHERE gender = 2 AND age IN ( 18 , 19 , 20 , 21 , 22 , 23 , 24 ) AND sense = 1","title":"Case 1"},{"location":"case/#case-2","text":"","title":"Case 2"},{"location":"case/#case-3","text":"","title":"Case 3"},{"location":"case/#reference","text":"","title":"Reference"},{"location":"catalyst/","text":"SQL Catalyst Tree UnaryNode\u3001BinaryNode\u3001LeafNode Rule Rule RuleExecutor Parser SQL\u3001Dataset\u3001DataFrame - ANTLR(\u8bcd\u6cd5\u3001\u8bed\u6cd5 ) - \u672a\u7ed1\u5b9a\u7684\u903b\u8f91\u8ba1\u5212\uff08Relation\u3001Function\u3001Attribute\uff09 Analyzer Catalog\u3001Metastore\u3001Rule - \u6570\u636e\u7ed1\u5b9a - \u7ed1\u5b9a\u7684\u903b\u8f91\u8ba1\u5212 Batch(Substitution\u3001Resolution\u3001Nondeterministic\u3001UDF\u3001FixNullability\u3001Cleanup) Optimizer RBO\uff08Rule-Based Optimizer\uff09 \u7ec4\u5408\u3001\u88c1\u526a\u3001\u4e0b\u63a8\u3001\u6d88\u9664\u3001\u7b80\u5316\u3001\u4f18\u5316 Planner \u7b56\u7565\uff08Strategy\uff09 CBO\uff08Cost-Based Optimizer\uff09\uff1aShuffle\u3001Join Execution Aggregation Join Tungsten Memory Management and Binary Processing Cache-aware computation(CPU L1/L2/L3: Cache Hit, Cache Locality) Code generation(Janino\u3001WholeStageCodegen) No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD Columnar Vectorization Parquet ORC CarbonData Codegen/Janino/JIT HashAggregate BroadcastHashJoin SortMergeJoin RDDScan DataSourceScan WholeStageCodegen Hint Join Shuffle Statistics Table(sizeInBytes\u3001rowCount\u3001hints) Column(distinctCount\u3001min\u3001max\u3001nullCount\u3001avgLen\u3001maxLen\u3001histogram) Adapter Data Source Federation Session Catalog Configuration View Function External Catalog Cache Compression ShuffleService Reference Spark SQL: Relational Data Processing in Spark Deep Dive into Spark SQL\u2019s Catalyst Optimizer Cost Based Optimizer in Apache Spark 2.2","title":"Catalyst"},{"location":"catalyst/#sql-catalyst","text":"","title":"SQL Catalyst"},{"location":"catalyst/#tree","text":"UnaryNode\u3001BinaryNode\u3001LeafNode","title":"Tree"},{"location":"catalyst/#rule","text":"Rule RuleExecutor","title":"Rule"},{"location":"catalyst/#parser","text":"SQL\u3001Dataset\u3001DataFrame - ANTLR(\u8bcd\u6cd5\u3001\u8bed\u6cd5 ) - \u672a\u7ed1\u5b9a\u7684\u903b\u8f91\u8ba1\u5212\uff08Relation\u3001Function\u3001Attribute\uff09","title":"Parser"},{"location":"catalyst/#analyzer","text":"Catalog\u3001Metastore\u3001Rule - \u6570\u636e\u7ed1\u5b9a - \u7ed1\u5b9a\u7684\u903b\u8f91\u8ba1\u5212 Batch(Substitution\u3001Resolution\u3001Nondeterministic\u3001UDF\u3001FixNullability\u3001Cleanup)","title":"Analyzer"},{"location":"catalyst/#optimizer","text":"RBO\uff08Rule-Based Optimizer\uff09 \u7ec4\u5408\u3001\u88c1\u526a\u3001\u4e0b\u63a8\u3001\u6d88\u9664\u3001\u7b80\u5316\u3001\u4f18\u5316","title":"Optimizer"},{"location":"catalyst/#planner","text":"\u7b56\u7565\uff08Strategy\uff09 CBO\uff08Cost-Based Optimizer\uff09\uff1aShuffle\u3001Join","title":"Planner"},{"location":"catalyst/#execution","text":"","title":"Execution"},{"location":"catalyst/#aggregation","text":"","title":"Aggregation"},{"location":"catalyst/#join","text":"","title":"Join"},{"location":"catalyst/#tungsten","text":"Memory Management and Binary Processing Cache-aware computation(CPU L1/L2/L3: Cache Hit, Cache Locality) Code generation(Janino\u3001WholeStageCodegen) No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD","title":"Tungsten"},{"location":"catalyst/#columnar","text":"","title":"Columnar"},{"location":"catalyst/#vectorization","text":"Parquet ORC CarbonData","title":"Vectorization"},{"location":"catalyst/#codegenjaninojit","text":"HashAggregate BroadcastHashJoin SortMergeJoin RDDScan DataSourceScan WholeStageCodegen","title":"Codegen/Janino/JIT"},{"location":"catalyst/#hint","text":"Join Shuffle","title":"Hint"},{"location":"catalyst/#statistics","text":"Table(sizeInBytes\u3001rowCount\u3001hints) Column(distinctCount\u3001min\u3001max\u3001nullCount\u3001avgLen\u3001maxLen\u3001histogram)","title":"Statistics"},{"location":"catalyst/#adapter","text":"","title":"Adapter"},{"location":"catalyst/#data-source","text":"Federation","title":"Data Source"},{"location":"catalyst/#session","text":"","title":"Session"},{"location":"catalyst/#catalog","text":"Configuration View Function External Catalog","title":"Catalog"},{"location":"catalyst/#cache","text":"","title":"Cache"},{"location":"catalyst/#compression","text":"","title":"Compression"},{"location":"catalyst/#shuffleservice","text":"","title":"ShuffleService"},{"location":"catalyst/#reference","text":"Spark SQL: Relational Data Processing in Spark Deep Dive into Spark SQL\u2019s Catalyst Optimizer Cost Based Optimizer in Apache Spark 2.2","title":"Reference"},{"location":"compute/","text":"\u8ba1\u7b97\uff08Compute\uff09 Pattern MR\u3001MRM\uff08Map\u3001Reduce\u3001Merge\uff09 \u53ef\u679a\u4e3e\u6027\uff08Ad hoc\u3001OLAP\uff09\u3001\u53ef\u52a0\u6027\uff08\u6279\u91cf\u3001\u589e\u91cf \uff09 \u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09 RDD Characteristics Partitions PreferredLocations Dependencies Iterator Partitioner Operations Creation Transformation Storage Action Dependencies Narrow Dependencies Shuffle/Wide Dependencies Stage ResultStage ShuffleMapStage DAG Lineage Shuffle Read/Write Server/Client Pull/Push Tungsten Memory Management and Binary Processing Cache-aware computation Code generation No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD Reference Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing","title":"Compute"},{"location":"compute/#compute","text":"","title":"\u8ba1\u7b97\uff08Compute\uff09"},{"location":"compute/#pattern","text":"MR\u3001MRM\uff08Map\u3001Reduce\u3001Merge\uff09 \u53ef\u679a\u4e3e\u6027\uff08Ad hoc\u3001OLAP\uff09\u3001\u53ef\u52a0\u6027\uff08\u6279\u91cf\u3001\u589e\u91cf \uff09","title":"Pattern"},{"location":"compute/#constraint","text":"","title":"\u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09"},{"location":"compute/#rdd","text":"","title":"RDD"},{"location":"compute/#characteristics","text":"Partitions PreferredLocations Dependencies Iterator Partitioner","title":"Characteristics"},{"location":"compute/#operations","text":"Creation Transformation Storage Action","title":"Operations"},{"location":"compute/#dependencies","text":"Narrow Dependencies Shuffle/Wide Dependencies","title":"Dependencies"},{"location":"compute/#stage","text":"ResultStage ShuffleMapStage","title":"Stage"},{"location":"compute/#dag","text":"Lineage","title":"DAG"},{"location":"compute/#shuffle","text":"Read/Write Server/Client Pull/Push","title":"Shuffle"},{"location":"compute/#tungsten","text":"Memory Management and Binary Processing Cache-aware computation Code generation No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD","title":"Tungsten"},{"location":"compute/#reference","text":"Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing","title":"Reference"},{"location":"metrics/","text":"\u5ea6\u91cf\uff08Metrics\uff09 Source Master Applications Worker Executor Driver ShuffleService Sink ConsoleSink CSVSink JmxSink MetricsServlet GraphiteSink Slf4jSink StatsdSink Web UI REST API Applications Jobs Stages Executors Storage Environment Streaming SQL Reference Monitoring and Instrumentation Dr. Elephant Sparklint","title":"Metrics"},{"location":"metrics/#metrics","text":"","title":"\u5ea6\u91cf\uff08Metrics\uff09"},{"location":"metrics/#source","text":"Master Applications Worker Executor Driver ShuffleService","title":"Source"},{"location":"metrics/#sink","text":"ConsoleSink CSVSink JmxSink MetricsServlet GraphiteSink Slf4jSink StatsdSink","title":"Sink"},{"location":"metrics/#web-ui-rest-api","text":"Applications Jobs Stages Executors Storage Environment Streaming SQL","title":"Web UI &amp; REST API"},{"location":"metrics/#reference","text":"Monitoring and Instrumentation Dr. Elephant Sparklint","title":"Reference"},{"location":"network/","text":"\u7f51\u7edc\uff08Network\uff09 \u901a\u4fe1\u673a\u5236 RPC\uff08Remote Procedure Call\uff09\uff1aProtocol Buffer\u3001Thrift\u3001Avro\uff08IDL\u3001Serialization\uff09 Message\uff1aQueue\u3001Pub-Sub\uff08Pull\u3001Push\uff09 Multi Broadcast\uff1aGossip\uff08Best Effort\u3001Anti-Entropy \u3001Rumor Mongering\uff09 \u89d2\u8272\uff08Role\uff09 Master, Worker, Client, Driver, Executor RPC Context Env Endpoint \u4e3b\u8981\u4f5c\u7528 \u6d88\u606f\u4e92\u901a\uff1aEvent\u3001Status \u6587\u4ef6\u4f20\u8f93\uff1aFetch\u3001Upload Block\uff1aStore\u3001Replication Shuffle\uff1aWriter\u3001Reader Reference \u4f53\u7cfb\u5316\u8ba4\u8bc6RPC \u6df1\u5165\u89e3\u6790Spark\u4e2d\u7684RPC","title":"Network"},{"location":"network/#network","text":"","title":"\u7f51\u7edc\uff08Network\uff09"},{"location":"network/#_1","text":"RPC\uff08Remote Procedure Call\uff09\uff1aProtocol Buffer\u3001Thrift\u3001Avro\uff08IDL\u3001Serialization\uff09 Message\uff1aQueue\u3001Pub-Sub\uff08Pull\u3001Push\uff09 Multi Broadcast\uff1aGossip\uff08Best Effort\u3001Anti-Entropy \u3001Rumor Mongering\uff09","title":"\u901a\u4fe1\u673a\u5236"},{"location":"network/#role","text":"Master, Worker, Client, Driver, Executor","title":"\u89d2\u8272\uff08Role\uff09"},{"location":"network/#rpc","text":"Context Env Endpoint","title":"RPC"},{"location":"network/#_2","text":"\u6d88\u606f\u4e92\u901a\uff1aEvent\u3001Status \u6587\u4ef6\u4f20\u8f93\uff1aFetch\u3001Upload Block\uff1aStore\u3001Replication Shuffle\uff1aWriter\u3001Reader","title":"\u4e3b\u8981\u4f5c\u7528"},{"location":"network/#reference","text":"\u4f53\u7cfb\u5316\u8ba4\u8bc6RPC \u6df1\u5165\u89e3\u6790Spark\u4e2d\u7684RPC","title":"Reference"},{"location":"projects-and-articles/","text":"Projects Articles Projects Impala Druid Kylin HAWQ Drill TiDB ClickHouse Doris(Palo) Tez Papers Spark SQL: Relational Data Processing in Spark Articles Resources Spark \u8bba\u6587\uff08\u5927\u578b\u96c6\u7fa4\u4e0a\u4e00\u79cd\u5feb\u901f\u548c\u901a\u7528\u6570\u636e\u5904\u7406\u67b6\u6784\uff09 Spark Internals Spark Internals\uff08\u4e2d\u6587\uff09 Spark\u6280\u672f\u5185\u5e55 Spark SQL\u6e90\u7801\u5206\u6790\u7cfb\u5217 Coolplay Spark\uff1a\u9177\u73a9 Spark: Spark \u6e90\u4ee3\u7801\u89e3\u6790\u3001Spark \u7c7b\u5e93\u7b49 Spark Graphx \u7684\u539f\u7406\u53ca\u76f8\u5173\u64cd\u4f5c\u7684\u6e90\u7801\u89e3\u6790 Spark ML Source Analysis\uff1aspark ml \u7b97\u6cd5\u539f\u7406\u5256\u6790\u4ee5\u53ca\u5177\u4f53\u7684\u6e90\u7801\u5b9e\u73b0\u5206\u6790 Spark \u7f16\u7a0b\u6307\u5357\u7b80\u4f53\u4e2d\u6587\u7248 Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3 Reference","title":"Projects & Articles"},{"location":"projects-and-articles/#projects-articles","text":"","title":"Projects &amp; Articles"},{"location":"projects-and-articles/#projects","text":"Impala Druid Kylin HAWQ Drill TiDB ClickHouse Doris(Palo) Tez","title":"Projects"},{"location":"projects-and-articles/#papers","text":"Spark SQL: Relational Data Processing in Spark","title":"Papers"},{"location":"projects-and-articles/#articles","text":"","title":"Articles"},{"location":"projects-and-articles/#resources","text":"Spark \u8bba\u6587\uff08\u5927\u578b\u96c6\u7fa4\u4e0a\u4e00\u79cd\u5feb\u901f\u548c\u901a\u7528\u6570\u636e\u5904\u7406\u67b6\u6784\uff09 Spark Internals Spark Internals\uff08\u4e2d\u6587\uff09 Spark\u6280\u672f\u5185\u5e55 Spark SQL\u6e90\u7801\u5206\u6790\u7cfb\u5217 Coolplay Spark\uff1a\u9177\u73a9 Spark: Spark \u6e90\u4ee3\u7801\u89e3\u6790\u3001Spark \u7c7b\u5e93\u7b49 Spark Graphx \u7684\u539f\u7406\u53ca\u76f8\u5173\u64cd\u4f5c\u7684\u6e90\u7801\u89e3\u6790 Spark ML Source Analysis\uff1aspark ml \u7b97\u6cd5\u539f\u7406\u5256\u6790\u4ee5\u53ca\u5177\u4f53\u7684\u6e90\u7801\u5b9e\u73b0\u5206\u6790 Spark \u7f16\u7a0b\u6307\u5357\u7b80\u4f53\u4e2d\u6587\u7248 Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3","title":"Resources"},{"location":"projects-and-articles/#reference","text":"","title":"Reference"},{"location":"relational-algebra/","text":"\u5173\u7cfb\u4ee3\u6570\uff08Relational Algebra\uff09 \u903b\u8f91\u8fd0\u7b97 \uff1a\u6216\uff08or \u2228 \uff09\u3001\u4e0e\uff08and \u2227 \uff09\u3001\u975e\uff08not \u00ac \uff09 \u6bd4\u8f83\u8fd0\u7b97 \uff1a\u5c0f\u4e8e\uff08 \uff09\u3001\u5c0f\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u5927\u4e8e\uff08 \uff09\u3001\u5927\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u7b49\u4e8e\uff08=\uff09\u3001\u4e0d\u7b49\u4e8e\uff08 \uff09 \u96c6\u5408\u8fd0\u7b97 \uff1a\u4ea4\uff08\u2229\uff09\u3001\u5e76\uff08\u222a\uff09\u3001\u5dee\uff08\u2212\uff09\u3001\u7b1b\u5361\u5c14\u79ef\uff08\u00d7\uff09 \u5173\u7cfb\u8fd0\u7b97 \uff1a\u9009\u62e9\uff08Selection \u03c3 \uff09\u3001\u6295\u5f71\uff08Projection \u03c0 \uff09\u3001\u8fde\u63a5\uff08Join \u22c8 \uff09\u3001\u9664\uff08\u00f7\uff09\u3001\u91cd\u547d\u540d\uff08\u03c1\uff09 \u805a\u96c6\u8fd0\u7b97 \uff1a\u6c42\u548c\uff08sum\uff09\u3001\u8ba1\u6570\uff08count\uff09\u3001\u5747\u503c\uff08avg\uff09\u3001\u6700\u5927\u503c\uff08max\uff09\u3001\u6700\u5c0f\u503c\uff08min\uff09 \u00b7 \u00b7 \u00b7 Reference \u5173\u7cfb\u4ee3\u6570","title":"Relational Algebra"},{"location":"relational-algebra/#relational-algebra","text":"\u903b\u8f91\u8fd0\u7b97 \uff1a\u6216\uff08or \u2228 \uff09\u3001\u4e0e\uff08and \u2227 \uff09\u3001\u975e\uff08not \u00ac \uff09 \u6bd4\u8f83\u8fd0\u7b97 \uff1a\u5c0f\u4e8e\uff08 \uff09\u3001\u5c0f\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u5927\u4e8e\uff08 \uff09\u3001\u5927\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u7b49\u4e8e\uff08=\uff09\u3001\u4e0d\u7b49\u4e8e\uff08 \uff09 \u96c6\u5408\u8fd0\u7b97 \uff1a\u4ea4\uff08\u2229\uff09\u3001\u5e76\uff08\u222a\uff09\u3001\u5dee\uff08\u2212\uff09\u3001\u7b1b\u5361\u5c14\u79ef\uff08\u00d7\uff09 \u5173\u7cfb\u8fd0\u7b97 \uff1a\u9009\u62e9\uff08Selection \u03c3 \uff09\u3001\u6295\u5f71\uff08Projection \u03c0 \uff09\u3001\u8fde\u63a5\uff08Join \u22c8 \uff09\u3001\u9664\uff08\u00f7\uff09\u3001\u91cd\u547d\u540d\uff08\u03c1\uff09 \u805a\u96c6\u8fd0\u7b97 \uff1a\u6c42\u548c\uff08sum\uff09\u3001\u8ba1\u6570\uff08count\uff09\u3001\u5747\u503c\uff08avg\uff09\u3001\u6700\u5927\u503c\uff08max\uff09\u3001\u6700\u5c0f\u503c\uff08min\uff09 \u00b7 \u00b7 \u00b7","title":"\u5173\u7cfb\u4ee3\u6570\uff08Relational Algebra\uff09"},{"location":"relational-algebra/#reference","text":"\u5173\u7cfb\u4ee3\u6570","title":"Reference"},{"location":"relational-model/","text":"\u5173\u7cfb\u6a21\u578b\uff08Relational Model\uff09 \u5173\u7cfb\u6a21\u578b \uff08Relational Model\uff09\uff1a\u57fa\u4e8e \u8c13\u8bcd\u903b\u8f91 \u548c \u96c6\u5408\u8bba \u7684\u4e00\u79cd\u6570\u636e\u6a21\u578b\u3002 \u5173\u7cfb\u6a21\u578b \u7684\u57fa\u672c\u5047\u5b9a\u662f\u6240\u6709\u6570\u636e\u90fd\u8868\u793a\u4e3a\u6570\u5b66\u4e0a\u7684 \u5173\u7cfb \uff0c\u5c31\u662f\u8bf4 n \u4e2a\u96c6\u5408\u7684\u7b1b\u5361\u513f\u79ef\u7684\u4e00\u4e2a\u5b50\u96c6\uff1b\u6709\u5173\u8fd9\u79cd\u6570\u636e\u7684\u63a8\u7406\u901a\u8fc7\u4e8c\u503c\uff08\u5c31\u662f\u8bf4\u6ca1\u6709 NULL \uff09\u7684 \u8c13\u8bcd\u903b\u8f91 \u6765\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u6bcf\u4e2a\u547d\u9898\u90fd\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u8ce6\u503c\uff1a\u8981\u4e48\u662f\u771f\u8981\u4e48\u662f\u5047\u3002 \u6570\u636e\u901a\u8fc7 \u5173\u7cfb\u6f14\u7b97 \u548c \u5173\u7cfb\u4ee3\u6570 \u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\u3002 \u5173\u7cfb\u6f14\u7b97\uff08\u8c13\u8bcd\uff09 \u5143\u7ec4\u5173\u7cfb\u6f14\u7b97\uff08\u884c\uff09 \u57df\u5173\u7cfb\u6f14\u7b97\uff08\u5217\uff09 \u5173\u7cfb\u4ee3\u6570\uff08\u96c6\u5408\uff09 Reference \u5173\u7cfb\u6a21\u578b","title":"Relational Model"},{"location":"relational-model/#relational-model","text":"\u5173\u7cfb\u6a21\u578b \uff08Relational Model\uff09\uff1a\u57fa\u4e8e \u8c13\u8bcd\u903b\u8f91 \u548c \u96c6\u5408\u8bba \u7684\u4e00\u79cd\u6570\u636e\u6a21\u578b\u3002 \u5173\u7cfb\u6a21\u578b \u7684\u57fa\u672c\u5047\u5b9a\u662f\u6240\u6709\u6570\u636e\u90fd\u8868\u793a\u4e3a\u6570\u5b66\u4e0a\u7684 \u5173\u7cfb \uff0c\u5c31\u662f\u8bf4 n \u4e2a\u96c6\u5408\u7684\u7b1b\u5361\u513f\u79ef\u7684\u4e00\u4e2a\u5b50\u96c6\uff1b\u6709\u5173\u8fd9\u79cd\u6570\u636e\u7684\u63a8\u7406\u901a\u8fc7\u4e8c\u503c\uff08\u5c31\u662f\u8bf4\u6ca1\u6709 NULL \uff09\u7684 \u8c13\u8bcd\u903b\u8f91 \u6765\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u6bcf\u4e2a\u547d\u9898\u90fd\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u8ce6\u503c\uff1a\u8981\u4e48\u662f\u771f\u8981\u4e48\u662f\u5047\u3002 \u6570\u636e\u901a\u8fc7 \u5173\u7cfb\u6f14\u7b97 \u548c \u5173\u7cfb\u4ee3\u6570 \u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\u3002 \u5173\u7cfb\u6f14\u7b97\uff08\u8c13\u8bcd\uff09 \u5143\u7ec4\u5173\u7cfb\u6f14\u7b97\uff08\u884c\uff09 \u57df\u5173\u7cfb\u6f14\u7b97\uff08\u5217\uff09 \u5173\u7cfb\u4ee3\u6570\uff08\u96c6\u5408\uff09","title":"\u5173\u7cfb\u6a21\u578b\uff08Relational Model\uff09"},{"location":"relational-model/#reference","text":"\u5173\u7cfb\u6a21\u578b","title":"Reference"},{"location":"retreat/","text":"\u5f15\u8a00\uff08Retreat\uff09 Basis\uff08\u57fa\u7840\uff09 \u64cd\u4f5c\u7cfb\u7edf\uff1a\u8fdb\u7a0b\u3001\u5185\u5b58\u3001\u6587\u4ef6\u3001IO\u3001\u8c03\u5ea6 \u7f51\u7edc\uff1aTCP\u3001RPC\u3001Netty \u6570\u636e\u5e93\uff1a\u5173\u7cfb\u6a21\u578b\u3001\u4e8b\u52a1 \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 Java/Scala\uff1aJVM\u3001JMM\u3001GC\u3001JIT \u5206\u5e03\u5f0f\uff1a\u5b58\u50a8\u3001\u8ba1\u7b97\u3001\u8c03\u5ea6\u3001\u7ba1\u7406\u3001\u65e5\u5fd7 Reference\uff1a \u6570\u636e\u5e93\u5185\u6838\u6708\u62a5 Computer Science Learning Notes OI Wiki","title":"Retreat"},{"location":"retreat/#retreat","text":"","title":"\u5f15\u8a00\uff08Retreat\uff09"},{"location":"retreat/#basis","text":"\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8fdb\u7a0b\u3001\u5185\u5b58\u3001\u6587\u4ef6\u3001IO\u3001\u8c03\u5ea6 \u7f51\u7edc\uff1aTCP\u3001RPC\u3001Netty \u6570\u636e\u5e93\uff1a\u5173\u7cfb\u6a21\u578b\u3001\u4e8b\u52a1 \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 Java/Scala\uff1aJVM\u3001JMM\u3001GC\u3001JIT \u5206\u5e03\u5f0f\uff1a\u5b58\u50a8\u3001\u8ba1\u7b97\u3001\u8c03\u5ea6\u3001\u7ba1\u7406\u3001\u65e5\u5fd7","title":"Basis\uff08\u57fa\u7840\uff09"},{"location":"retreat/#reference","text":"\u6570\u636e\u5e93\u5185\u6838\u6708\u62a5 Computer Science Learning Notes OI Wiki","title":"Reference\uff1a"},{"location":"scheduler/","text":"\u8c03\u5ea6\uff08Scheduler\uff09 \u8d44\u6e90\uff08Resource\uff09 \u8ba1\u7b97\uff08CPU\u3001GPU\uff09 I/O\uff08Memory\u3001Disk \u3001Network\u3001RAID\u3001HBA\uff09 \u5bb9\u5668\uff08Container\uff09 \u8d44\u6e90\u9694\u79bb\uff08Resource Isolation \uff09 \u751f\u547d\u5468\u671f\uff08Life Cycle\uff09 \u8d44\u6e90\u5206\u914d\uff08Allocation\uff09 \u5168\u91cf\uff08Gang \uff09 \u589e\u91cf\uff08Incremental \uff09 \u8c03\u5ea6\u7b56\u7565\uff08Strategy\uff09 FIFO Capacity Fair Delay DRF\uff08Domainant Reource Fair\uff09 \u8c03\u5ea6\u7b97\u6cd5\uff08Algorithm\uff09 First Fitness \u8d2a\u5fc3\u7b97\u6cd5 \u52a8\u6001\u89c4\u5212 Graph Base\uff08Firmament\uff09 \u5f3a\u5316\u5b66\u4e60 \u8c03\u5ea6\u6a21\u578b\uff08Pattern\uff09 \u8d44\u6e90\uff08Yarn\u3001Mesos\u3001Kubernetes\uff09 \u4f5c\u4e1a\uff08Oozie\u3001Airflow\u3001Azkaban\uff09 \u4efb\u52a1\uff08Spark\u3001TEZ\u3001Presto\uff09 \u8c03\u5ea6\u67b6\u6784\uff08Architecture\uff09 \u96c6\u4e2d\u8c03\u5ea6\uff08Monolithic \uff09 \u4e24\u7ea7\u8c03\u5ea6\uff08Two Level \uff09 \u5171\u4eab\u72b6\u6001\u8c03\u5ea6\uff08Shared State \uff09 \u5168\u5206\u5e03\u5f0f\u8c03\u5ea6 \u6df7\u5408\u8c03\u5ea6 \u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09 \u8d44\u6e90\u5f02\u8d28\u6027\u3001\u8d1f\u8f7d\u5f02\u8d28\u6027\u3001\u4eb2\u548c\u4e0e\u53cd\u4eb2\u548c\u3001\u6570\u636e\u4f9d\u8d56\u3001\u6570\u636e\u672c\u5730\u6027\u3001\u8d44\u6e90\u5229\u7528\u7387\u3001\u8d44\u6e90\u9694\u79bb\u3001\u516c\u5e73\u6027\u3001\u4f18\u5148\u7ea7\u3001SLA\u3001\u9965\u997f\u4e0e\u6d3b\u9501\u3001\u5bb9\u9519 Reference\uff1a Scheduler Architectures Firmament: Fast, Centralized Cluster Scheduling at Scale","title":"Scheduler"},{"location":"scheduler/#scheduler","text":"","title":"\u8c03\u5ea6\uff08Scheduler\uff09"},{"location":"scheduler/#resource","text":"\u8ba1\u7b97\uff08CPU\u3001GPU\uff09 I/O\uff08Memory\u3001Disk \u3001Network\u3001RAID\u3001HBA\uff09","title":"\u8d44\u6e90\uff08Resource\uff09"},{"location":"scheduler/#container","text":"\u8d44\u6e90\u9694\u79bb\uff08Resource Isolation \uff09 \u751f\u547d\u5468\u671f\uff08Life Cycle\uff09","title":"\u5bb9\u5668\uff08Container\uff09"},{"location":"scheduler/#allocation","text":"\u5168\u91cf\uff08Gang \uff09 \u589e\u91cf\uff08Incremental \uff09","title":"\u8d44\u6e90\u5206\u914d\uff08Allocation\uff09"},{"location":"scheduler/#strategy","text":"FIFO Capacity Fair Delay DRF\uff08Domainant Reource Fair\uff09","title":"\u8c03\u5ea6\u7b56\u7565\uff08Strategy\uff09"},{"location":"scheduler/#algorithm","text":"First Fitness \u8d2a\u5fc3\u7b97\u6cd5 \u52a8\u6001\u89c4\u5212 Graph Base\uff08Firmament\uff09 \u5f3a\u5316\u5b66\u4e60","title":"\u8c03\u5ea6\u7b97\u6cd5\uff08Algorithm\uff09"},{"location":"scheduler/#pattern","text":"\u8d44\u6e90\uff08Yarn\u3001Mesos\u3001Kubernetes\uff09 \u4f5c\u4e1a\uff08Oozie\u3001Airflow\u3001Azkaban\uff09 \u4efb\u52a1\uff08Spark\u3001TEZ\u3001Presto\uff09","title":"\u8c03\u5ea6\u6a21\u578b\uff08Pattern\uff09"},{"location":"scheduler/#architecture","text":"\u96c6\u4e2d\u8c03\u5ea6\uff08Monolithic \uff09 \u4e24\u7ea7\u8c03\u5ea6\uff08Two Level \uff09 \u5171\u4eab\u72b6\u6001\u8c03\u5ea6\uff08Shared State \uff09 \u5168\u5206\u5e03\u5f0f\u8c03\u5ea6 \u6df7\u5408\u8c03\u5ea6","title":"\u8c03\u5ea6\u67b6\u6784\uff08Architecture\uff09"},{"location":"scheduler/#constraint","text":"\u8d44\u6e90\u5f02\u8d28\u6027\u3001\u8d1f\u8f7d\u5f02\u8d28\u6027\u3001\u4eb2\u548c\u4e0e\u53cd\u4eb2\u548c\u3001\u6570\u636e\u4f9d\u8d56\u3001\u6570\u636e\u672c\u5730\u6027\u3001\u8d44\u6e90\u5229\u7528\u7387\u3001\u8d44\u6e90\u9694\u79bb\u3001\u516c\u5e73\u6027\u3001\u4f18\u5148\u7ea7\u3001SLA\u3001\u9965\u997f\u4e0e\u6d3b\u9501\u3001\u5bb9\u9519","title":"\u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09"},{"location":"scheduler/#reference","text":"Scheduler Architectures Firmament: Fast, Centralized Cluster Scheduling at Scale","title":"Reference\uff1a"},{"location":"storage/","text":"\u5b58\u50a8\uff08Storage\uff09 \u5b58\u50a8\u7ea7\u522b\uff08Storage Level\uff09 Disk Memory OffHeap Serialization Replication \u64cd\u4f5c\uff08Operation\uff09 LRU(Least Recently Used) Cache(persist(StorageLevel.MEMORY_AND_DISK)) Persist(persist/unPersist/destroy) Checkpoint \u5b58\u50a8\uff08Store\uff09 Disk Memory(OnHeap/OffHeap) \u7edf\u4e00\u5185\u5b58\u7ba1\u7406\uff08Unified Memory Management\uff09 Execution Storage \u4f1a\u8bdd\uff08Session\uff09 Metastore Local Session Global Session \u6d17\u724c\uff08Shuffle\uff09 Read/Write Server/Client Pull/Push \u5b58\u50a8\u683c\u5f0f\uff08Storage Format\uff09 ORC Parquet CarbonData Reference Apache Spark \u5185\u5b58\u7ba1\u7406\u8be6\u89e3 Spark Storage \u2460 - Spark Storage \u6a21\u5757\u6574\u4f53\u67b6\u6784 Spark Storage \u2461 - BlockManager \u7684\u521b\u5efa\u4e0e\u6ce8\u518c Spark Storage \u2462 - Master \u4e0e Slave \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u4e0e\u65f6\u673a Spark Storage \u2463 - \u5b58\u50a8\u6267\u884c\u7c7b\u4ecb\u7ecd\uff08DiskBlockManager\u3001DiskStore\u3001MemoryStore\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0a\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0b\uff09","title":"Storage"},{"location":"storage/#storage","text":"","title":"\u5b58\u50a8\uff08Storage\uff09"},{"location":"storage/#storage-level","text":"Disk Memory OffHeap Serialization Replication","title":"\u5b58\u50a8\u7ea7\u522b\uff08Storage Level\uff09"},{"location":"storage/#operation","text":"LRU(Least Recently Used) Cache(persist(StorageLevel.MEMORY_AND_DISK)) Persist(persist/unPersist/destroy) Checkpoint","title":"\u64cd\u4f5c\uff08Operation\uff09"},{"location":"storage/#store","text":"Disk Memory(OnHeap/OffHeap)","title":"\u5b58\u50a8\uff08Store\uff09"},{"location":"storage/#unified-memory-management","text":"Execution Storage","title":"\u7edf\u4e00\u5185\u5b58\u7ba1\u7406\uff08Unified Memory Management\uff09"},{"location":"storage/#session","text":"Metastore Local Session Global Session","title":"\u4f1a\u8bdd\uff08Session\uff09"},{"location":"storage/#shuffle","text":"Read/Write Server/Client Pull/Push","title":"\u6d17\u724c\uff08Shuffle\uff09"},{"location":"storage/#storage-format","text":"ORC Parquet CarbonData","title":"\u5b58\u50a8\u683c\u5f0f\uff08Storage Format\uff09"},{"location":"storage/#reference","text":"Apache Spark \u5185\u5b58\u7ba1\u7406\u8be6\u89e3 Spark Storage \u2460 - Spark Storage \u6a21\u5757\u6574\u4f53\u67b6\u6784 Spark Storage \u2461 - BlockManager \u7684\u521b\u5efa\u4e0e\u6ce8\u518c Spark Storage \u2462 - Master \u4e0e Slave \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u4e0e\u65f6\u673a Spark Storage \u2463 - \u5b58\u50a8\u6267\u884c\u7c7b\u4ecb\u7ecd\uff08DiskBlockManager\u3001DiskStore\u3001MemoryStore\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0a\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0b\uff09","title":"Reference"},{"location":"tuning/","text":"SQL Tuning Configuration Design Program Dependency Boundary Reference Tuning Spark","title":"Tuning"},{"location":"tuning/#sql-tuning","text":"","title":"SQL Tuning"},{"location":"tuning/#configuration","text":"","title":"Configuration"},{"location":"tuning/#design-program","text":"","title":"Design &amp; Program"},{"location":"tuning/#dependency-boundary","text":"","title":"Dependency &amp; Boundary"},{"location":"tuning/#reference","text":"Tuning Spark","title":"Reference"},{"location":"work-and-practices/","text":"Work Practices ETL DW Tuning Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3 Data Governance\uff08Table Column - Lineage Impact - Data Graph\uff09 Atlas Sentry WhereHows Spline Performance\uff08Metrics\u3001Heuristics\uff09 Dr. Elephant Sparklint SparkOscope Sparklens SparkMeasure DRIVEN Reference","title":"Work & Practices"},{"location":"work-and-practices/#work-practices","text":"","title":"Work &amp; Practices"},{"location":"work-and-practices/#etl-dw","text":"","title":"ETL &amp; DW"},{"location":"work-and-practices/#tuning","text":"Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3","title":"Tuning"},{"location":"work-and-practices/#data-governancetable-column-lineage-impact-data-graph","text":"Atlas Sentry WhereHows Spline","title":"Data Governance\uff08Table &amp; Column -&gt; Lineage &amp; Impact -&gt; Data Graph\uff09"},{"location":"work-and-practices/#performancemetricsheuristics","text":"Dr. Elephant Sparklint SparkOscope Sparklens SparkMeasure DRIVEN","title":"Performance\uff08Metrics\u3001Heuristics\uff09"},{"location":"work-and-practices/#reference","text":"","title":"Reference"}]}