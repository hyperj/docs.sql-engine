{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u5f53\u524d\u7248\u672c\u57fa\u4e8e Spark SQL 2.x \u8fdb\u884c\u6574\u7406\uff0c\u53c2\u8003\u4e86\u4e3b\u6d41\u5206\u5e03\u5f0f SQL \u8ba1\u7b97\u5f15\u64ce\u76f8\u5173\u7684\u5f00\u6e90\u9879\u76ee\u3002 Spark Core\uff08RDD APIs\uff09\u3001Data Source Connectors Catalyst Optimization\u3001Tungsten Execution SparkSession\u3001Dataset/DataFrame APIs\u3001SQL Structured Streaming\u3001MLlib\u3001GraphFrame\u3001TensorFrames Reference Spark SQL : Spark SQL is Apache Spark's module for working with structured data. Hive : The Apache Hive \u2122 data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Structure can be projected onto data already in storage. A command line tool and JDBC driver are provided to connect users to Hive. Presto : Distributed SQL Query Engine for Big Data.","title":"\u9996\u9875"},{"location":"#introduction","text":"\u5f53\u524d\u7248\u672c\u57fa\u4e8e Spark SQL 2.x \u8fdb\u884c\u6574\u7406\uff0c\u53c2\u8003\u4e86\u4e3b\u6d41\u5206\u5e03\u5f0f SQL \u8ba1\u7b97\u5f15\u64ce\u76f8\u5173\u7684\u5f00\u6e90\u9879\u76ee\u3002 Spark Core\uff08RDD APIs\uff09\u3001Data Source Connectors Catalyst Optimization\u3001Tungsten Execution SparkSession\u3001Dataset/DataFrame APIs\u3001SQL Structured Streaming\u3001MLlib\u3001GraphFrame\u3001TensorFrames","title":"Introduction"},{"location":"#reference","text":"Spark SQL : Spark SQL is Apache Spark's module for working with structured data. Hive : The Apache Hive \u2122 data warehouse software facilitates reading, writing, and managing large datasets residing in distributed storage using SQL. Structure can be projected onto data already in storage. A command line tool and JDBC driver are provided to connect users to Hive. Presto : Distributed SQL Query Engine for Big Data.","title":"Reference"},{"location":"appendix-a/","text":"\u9644\u5f55 A\uff08Appendix A\uff09 Application -1:n- Session(Context) -1:n- Job -1:n- Stage Task -1:n- Partition -1:n- Block Configuration Application Properties \u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.driver.memory - 1g 2g, 4g Driver \u5185\u5b58 spark.driver.cores - 1 2, 4 Driver \u6838\u6570 spark.executor.memory - 1g 4g, 16g Executor \u5185\u5b58 spark.executor.cores - 1 2, 8 Executor \u6838\u6570 Runtime Environment Shuffle Behavior Compression and Serialization Memory Management Execution Behavior Networking Scheduling Dynamic Allocation Spark SQL \u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.sql.shuffle.partitions - 200 20, 400 Shuffle\u5206\u533a\u6570\u91cf\uff08Join\u3001Aggr\uff09 spark.sql.autoBroadcastJoinThreshold - 10L * 1024 * 1024 (32, 64) * 1024 * 1024 \u81ea\u52a8\u4f18\u5316\u4e3aBroadcastJoin\u9608\u503c spark.sql.adaptive.enabled - false true \u81ea\u9002\u5e94\u67e5\u8be2\u6267\u884c\uff08Broadcast\u3001Partition\u3001Skew\uff09 spark.sql.adaptive.shuffle.targetPostShuffleInputSize - 64 * 1024 * 1024 (32, 128) * 1024 * 1024 Shuffle\u8bfb\u53d6\u6587\u4ef6\u5927\u5c0f spark.sql.adaptive.minNumPostShufflePartitions - -1 10, 200 Shuffle\u6700\u5c0f\u5206\u533a\u6570\u91cf Yarn Hive \u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 hive.exec.dynamic.partition - false true \u5141\u8bb8\u52a8\u6001\u5206\u533a hive.exec.dynamic.partition.mode - strict nonstrict \u52a8\u6001\u5206\u533a\u6a21\u5f0f hive.exec.max.dynamic.partitions - 1000 100-1000 \u5141\u8bb8\u521b\u5efa\u6700\u5927\u5206\u533a\u6570 MapReduce HDFS JVM Reference Spark Configuration SQLConf.scala","title":"\u9644\u5f55 A"},{"location":"appendix-a/#aappendix-a","text":"Application -1:n- Session(Context) -1:n- Job -1:n- Stage Task -1:n- Partition -1:n- Block","title":"\u9644\u5f55 A\uff08Appendix A\uff09"},{"location":"appendix-a/#configuration","text":"","title":"Configuration"},{"location":"appendix-a/#application-properties","text":"\u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.driver.memory - 1g 2g, 4g Driver \u5185\u5b58 spark.driver.cores - 1 2, 4 Driver \u6838\u6570 spark.executor.memory - 1g 4g, 16g Executor \u5185\u5b58 spark.executor.cores - 1 2, 8 Executor \u6838\u6570","title":"Application Properties"},{"location":"appendix-a/#runtime-environment","text":"","title":"Runtime Environment"},{"location":"appendix-a/#shuffle-behavior","text":"","title":"Shuffle Behavior"},{"location":"appendix-a/#compression-and-serialization","text":"","title":"Compression and Serialization"},{"location":"appendix-a/#memory-management","text":"","title":"Memory Management"},{"location":"appendix-a/#execution-behavior","text":"","title":"Execution Behavior"},{"location":"appendix-a/#networking","text":"","title":"Networking"},{"location":"appendix-a/#scheduling","text":"","title":"Scheduling"},{"location":"appendix-a/#dynamic-allocation","text":"","title":"Dynamic Allocation"},{"location":"appendix-a/#spark-sql","text":"\u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 spark.sql.shuffle.partitions - 200 20, 400 Shuffle\u5206\u533a\u6570\u91cf\uff08Join\u3001Aggr\uff09 spark.sql.autoBroadcastJoinThreshold - 10L * 1024 * 1024 (32, 64) * 1024 * 1024 \u81ea\u52a8\u4f18\u5316\u4e3aBroadcastJoin\u9608\u503c spark.sql.adaptive.enabled - false true \u81ea\u9002\u5e94\u67e5\u8be2\u6267\u884c\uff08Broadcast\u3001Partition\u3001Skew\uff09 spark.sql.adaptive.shuffle.targetPostShuffleInputSize - 64 * 1024 * 1024 (32, 128) * 1024 * 1024 Shuffle\u8bfb\u53d6\u6587\u4ef6\u5927\u5c0f spark.sql.adaptive.minNumPostShufflePartitions - -1 10, 200 Shuffle\u6700\u5c0f\u5206\u533a\u6570\u91cf","title":"Spark SQL"},{"location":"appendix-a/#yarn","text":"","title":"Yarn"},{"location":"appendix-a/#hive","text":"\u540d\u79f0 \u7248\u672c \u9ed8\u8ba4\u503c \u63a8\u8350\u503c \u542b\u4e49 hive.exec.dynamic.partition - false true \u5141\u8bb8\u52a8\u6001\u5206\u533a hive.exec.dynamic.partition.mode - strict nonstrict \u52a8\u6001\u5206\u533a\u6a21\u5f0f hive.exec.max.dynamic.partitions - 1000 100-1000 \u5141\u8bb8\u521b\u5efa\u6700\u5927\u5206\u533a\u6570","title":"Hive"},{"location":"appendix-a/#mapreduce","text":"","title":"MapReduce"},{"location":"appendix-a/#hdfs","text":"","title":"HDFS"},{"location":"appendix-a/#jvm","text":"","title":"JVM"},{"location":"appendix-a/#reference","text":"Spark Configuration SQLConf.scala","title":"Reference"},{"location":"appendix-b/","text":"\u9644\u5f55 B\uff08Appendix B\uff09 \u6570\u636e\u7c7b\u578b\uff08Data Types\uff09 Spark SQL and DataFrames support the following data types: Numeric types ByteType: Represents 1-byte signed integer numbers. The range of numbers is from -128 to 127. ShortType: Represents 2-byte signed integer numbers. The range of numbers is from -32768 to 32767. IntegerType: Represents 4-byte signed integer numbers. The range of numbers is from -2147483648 to 2147483647. LongType: Represents 8-byte signed integer numbers. The range of numbers is from -9223372036854775808 to 9223372036854775807. FloatType: Represents 4-byte single-precision floating point numbers. DoubleType: Represents 8-byte double-precision floating point numbers. DecimalType: Represents arbitrary-precision signed decimal numbers. Backed internally by java.math.BigDecimal. A BigDecimal consists of an arbitrary precision integer unscaled value and a 32-bit integer scale. String type StringType: Represents character string values. Binary type BinaryType: Represents byte sequence values. Boolean type BooleanType: Represents boolean values. Datetime type TimestampType: Represents values comprising values of fields year, month, day, hour, minute, and second. DateType: Represents values comprising values of fields year, month, day. Complex types ArrayType(elementType, containsNull): Represents values comprising a sequence of elements with the type of elementType. containsNull is used to indicate if elements in a ArrayType value can have null values. MapType(keyType, valueType, valueContainsNull): Represents values comprising a set of key-value pairs. The data type of keys are described by keyType and the data type of values are described by valueType. For a MapType value, keys are not allowed to have null values. valueContainsNull is used to indicate if values of a MapType value can have null values. StructType(fields): Represents values with the structure described by a sequence of StructFields (fields). StructField(name, dataType, nullable): Represents a field in a StructType. The name of a field is indicated by name. The data type of a field is indicated by dataType. nullable is used to indicate if values of this fields can have null values. Manual DDL (Data Definition Language) CREATE/DROP/ALTER/TRUNCATE/SHOW/DESCRIBE DATABASE/TABLE/COLUMN/VIEW/ INDEX/MACRO /FUNCTION DML (Data Manipulation Language) LOAD/INSERT/ UPDATE/DELETE/MERGE IMPORT/EXPORT EXPLAIN DQL (Data Query Language) SELECT DCL (Data Control Language) GRANT/REVOKE ROLE/PRIVILEGE DTL (Data Transaction Language) LOCKS/TRANSACTIONS/COMPACTIONS Functions array_distinct array_distinct(array) - Removes duplicate values from the array. Examples: SELECT array_distinct ( array ( 1 , 2 , 3 , null , 3 )); [ 1 , 2 , 3 , null ] Since: 2.4.0 array_except array_except(array1, array2) - Returns an array of the elements in array1 but not in array2, without duplicates. Examples: SELECT array_except ( array ( 1 , 2 , 3 ), array ( 1 , 3 , 5 )); [ 2 ] Since: 2.4.0 array_intersect array_intersect(array1, array2) - Returns an array of the elements in the intersection of array1 and array2, without duplicates. Examples: SELECT array_intersect ( array ( 1 , 2 , 3 ), array ( 1 , 3 , 5 )); [ 1 , 3 ] Since: 2.4.0 array_join array_join(array, delimiter[, nullReplacement]) - Concatenates the elements of the given array using the delimiter and an optional string to replace nulls. If no value is set for nullReplacement, any null value is filtered. Examples: SELECT array_join ( array ( hello , world ), ); hello world SELECT array_join ( array ( hello , null , world ), ); hello world SELECT array_join ( array ( hello , null , world ), , , ); hello , world Since: 2.4.0 array_max array_max(array) - Returns the maximum value in the array. NULL elements are skipped. Examples: SELECT array_max ( array ( 1 , 20 , null , 3 )); 20 Since: 2.4.0 array_min array_min(array) - Returns the minimum value in the array. NULL elements are skipped. Examples: SELECT array_min ( array ( 1 , 20 , null , 3 )); 1 Since: 2.4.0 array_position array_position(array, element) - Returns the (1-based) index of the first element of the array as long. Examples: SELECT array_position ( array ( 3 , 2 , 1 ), 1 ); 3 Since: 2.4.0 array_remove array_remove(array, element) - Remove all elements that equal to element from array. Examples: SELECT array_remove ( array ( 1 , 2 , 3 , null , 3 ), 3 ); [ 1 , 2 , null ] Since: 2.4.0 array_repeat array_repeat(element, count) - Returns the array containing element count times. Examples: SELECT array_repeat ( 123 , 2 ); [ 123 , 123 ] Since: 2.4.0 array_sort array_sort(array) - Sorts the input array in ascending order. The elements of the input array must be orderable. Null elements will be placed at the end of the returned array. Examples: SELECT array_sort ( array ( b , d , null , c , a )); [ a , b , c , d , null ] Since: 2.4.0 array_union array_union(array1, array2) - Returns an array of the elements in the union of array1 and array2, without duplicates. Examples: SELECT array_union ( array ( 1 , 2 , 3 ), array ( 1 , 3 , 5 )); [ 1 , 2 , 3 , 5 ] Since: 2.4.0 arrays_overlap arrays_overlap(a1, a2) - Returns true if a1 contains at least a non-null element present also in a2. If the arrays have no common element and they are both non-empty and either of them contains a null element null is returned, false otherwise. Examples: SELECT arrays_overlap ( array ( 1 , 2 , 3 ), array ( 3 , 4 , 5 )); true Since: 2.4.0 arrays_zip arrays_zip(a1, a2, ...) - Returns a merged array of structs in which the N-th struct contains all N-th values of input arrays. Examples: SELECT arrays_zip ( array ( 1 , 2 , 3 ), array ( 2 , 3 , 4 )); [ { 0 : 1 , 1 : 2 } , { 0 : 2 , 1 : 3 } , { 0 : 3 , 1 : 4 } ] SELECT arrays_zip ( array ( 1 , 2 ), array ( 2 , 3 ), array ( 3 , 4 )); [ { 0 : 1 , 1 : 2 , 2 : 3 } , { 0 : 2 , 1 : 3 , 2 : 4 } ] Since: 2.4.0 from_json from_json(jsonStr, schema[, options]) - Returns a struct value with the given jsonStr and schema. Examples: SELECT from_json ( { a :1, b :0.8} , a INT, b DOUBLE ); { a : 1 , b : 0 . 8 } SELECT from_json ( { time : 26/08/2015 } , time Timestamp , map ( timestampFormat , dd/MM/yyyy )); { time : 2015-08-26 00:00:00.0 } Since: 2.2.0 to_json to_json(expr[, options]) - Returns a json string with a given struct value Examples: SELECT to_json ( named_struct ( a , 1 , b , 2 )); { a : 1 , b : 2 } SELECT to_json ( named_struct ( time , to_timestamp ( 2015-08-26 , yyyy-MM-dd )), map ( timestampFormat , dd/MM/yyyy )); { time : 26/08/2015 } SELECT to_json ( array ( named_struct ( a , 1 , b , 2 )); [ { a : 1 , b : 2 } ] SELECT to_json ( map ( a , named_struct ( b , 1 ))); { a : { b : 1 }} SELECT to_json ( map ( named_struct ( a , 1 ), named_struct ( b , 2 ))); { [1] : { b : 2 }} SELECT to_json ( map ( a , 1 )); { a : 1 } SELECT to_json ( array (( map ( a , 1 )))); [ { a : 1 } ] Since: 2.2.0 Reference Spark SQL, Built-in Functions","title":"\u9644\u5f55 B"},{"location":"appendix-b/#bappendix-b","text":"","title":"\u9644\u5f55 B\uff08Appendix B\uff09"},{"location":"appendix-b/#data-types","text":"Spark SQL and DataFrames support the following data types: Numeric types ByteType: Represents 1-byte signed integer numbers. The range of numbers is from -128 to 127. ShortType: Represents 2-byte signed integer numbers. The range of numbers is from -32768 to 32767. IntegerType: Represents 4-byte signed integer numbers. The range of numbers is from -2147483648 to 2147483647. LongType: Represents 8-byte signed integer numbers. The range of numbers is from -9223372036854775808 to 9223372036854775807. FloatType: Represents 4-byte single-precision floating point numbers. DoubleType: Represents 8-byte double-precision floating point numbers. DecimalType: Represents arbitrary-precision signed decimal numbers. Backed internally by java.math.BigDecimal. A BigDecimal consists of an arbitrary precision integer unscaled value and a 32-bit integer scale. String type StringType: Represents character string values. Binary type BinaryType: Represents byte sequence values. Boolean type BooleanType: Represents boolean values. Datetime type TimestampType: Represents values comprising values of fields year, month, day, hour, minute, and second. DateType: Represents values comprising values of fields year, month, day. Complex types ArrayType(elementType, containsNull): Represents values comprising a sequence of elements with the type of elementType. containsNull is used to indicate if elements in a ArrayType value can have null values. MapType(keyType, valueType, valueContainsNull): Represents values comprising a set of key-value pairs. The data type of keys are described by keyType and the data type of values are described by valueType. For a MapType value, keys are not allowed to have null values. valueContainsNull is used to indicate if values of a MapType value can have null values. StructType(fields): Represents values with the structure described by a sequence of StructFields (fields). StructField(name, dataType, nullable): Represents a field in a StructType. The name of a field is indicated by name. The data type of a field is indicated by dataType. nullable is used to indicate if values of this fields can have null values.","title":"\u6570\u636e\u7c7b\u578b\uff08Data Types\uff09"},{"location":"appendix-b/#manual","text":"","title":"Manual"},{"location":"appendix-b/#ddl-data-definition-language","text":"CREATE/DROP/ALTER/TRUNCATE/SHOW/DESCRIBE DATABASE/TABLE/COLUMN/VIEW/ INDEX/MACRO /FUNCTION","title":"DDL (Data Definition Language)"},{"location":"appendix-b/#dml-data-manipulation-language","text":"LOAD/INSERT/ UPDATE/DELETE/MERGE IMPORT/EXPORT EXPLAIN","title":"DML (Data Manipulation Language)"},{"location":"appendix-b/#dql-data-query-language","text":"SELECT","title":"DQL (Data Query Language)"},{"location":"appendix-b/#dcl-data-control-language","text":"GRANT/REVOKE ROLE/PRIVILEGE","title":"DCL (Data Control Language)"},{"location":"appendix-b/#dtl-data-transaction-language","text":"LOCKS/TRANSACTIONS/COMPACTIONS","title":"DTL (Data Transaction Language)"},{"location":"appendix-b/#functions","text":"","title":"Functions"},{"location":"appendix-b/#array_distinct","text":"array_distinct(array) - Removes duplicate values from the array. Examples: SELECT array_distinct ( array ( 1 , 2 , 3 , null , 3 )); [ 1 , 2 , 3 , null ] Since: 2.4.0","title":"array_distinct"},{"location":"appendix-b/#array_except","text":"array_except(array1, array2) - Returns an array of the elements in array1 but not in array2, without duplicates. Examples: SELECT array_except ( array ( 1 , 2 , 3 ), array ( 1 , 3 , 5 )); [ 2 ] Since: 2.4.0","title":"array_except"},{"location":"appendix-b/#array_intersect","text":"array_intersect(array1, array2) - Returns an array of the elements in the intersection of array1 and array2, without duplicates. Examples: SELECT array_intersect ( array ( 1 , 2 , 3 ), array ( 1 , 3 , 5 )); [ 1 , 3 ] Since: 2.4.0","title":"array_intersect"},{"location":"appendix-b/#array_join","text":"array_join(array, delimiter[, nullReplacement]) - Concatenates the elements of the given array using the delimiter and an optional string to replace nulls. If no value is set for nullReplacement, any null value is filtered. Examples: SELECT array_join ( array ( hello , world ), ); hello world SELECT array_join ( array ( hello , null , world ), ); hello world SELECT array_join ( array ( hello , null , world ), , , ); hello , world Since: 2.4.0","title":"array_join"},{"location":"appendix-b/#array_max","text":"array_max(array) - Returns the maximum value in the array. NULL elements are skipped. Examples: SELECT array_max ( array ( 1 , 20 , null , 3 )); 20 Since: 2.4.0","title":"array_max"},{"location":"appendix-b/#array_min","text":"array_min(array) - Returns the minimum value in the array. NULL elements are skipped. Examples: SELECT array_min ( array ( 1 , 20 , null , 3 )); 1 Since: 2.4.0","title":"array_min"},{"location":"appendix-b/#array_position","text":"array_position(array, element) - Returns the (1-based) index of the first element of the array as long. Examples: SELECT array_position ( array ( 3 , 2 , 1 ), 1 ); 3 Since: 2.4.0","title":"array_position"},{"location":"appendix-b/#array_remove","text":"array_remove(array, element) - Remove all elements that equal to element from array. Examples: SELECT array_remove ( array ( 1 , 2 , 3 , null , 3 ), 3 ); [ 1 , 2 , null ] Since: 2.4.0","title":"array_remove"},{"location":"appendix-b/#array_repeat","text":"array_repeat(element, count) - Returns the array containing element count times. Examples: SELECT array_repeat ( 123 , 2 ); [ 123 , 123 ] Since: 2.4.0","title":"array_repeat"},{"location":"appendix-b/#array_sort","text":"array_sort(array) - Sorts the input array in ascending order. The elements of the input array must be orderable. Null elements will be placed at the end of the returned array. Examples: SELECT array_sort ( array ( b , d , null , c , a )); [ a , b , c , d , null ] Since: 2.4.0","title":"array_sort"},{"location":"appendix-b/#array_union","text":"array_union(array1, array2) - Returns an array of the elements in the union of array1 and array2, without duplicates. Examples: SELECT array_union ( array ( 1 , 2 , 3 ), array ( 1 , 3 , 5 )); [ 1 , 2 , 3 , 5 ] Since: 2.4.0","title":"array_union"},{"location":"appendix-b/#arrays_overlap","text":"arrays_overlap(a1, a2) - Returns true if a1 contains at least a non-null element present also in a2. If the arrays have no common element and they are both non-empty and either of them contains a null element null is returned, false otherwise. Examples: SELECT arrays_overlap ( array ( 1 , 2 , 3 ), array ( 3 , 4 , 5 )); true Since: 2.4.0","title":"arrays_overlap"},{"location":"appendix-b/#arrays_zip","text":"arrays_zip(a1, a2, ...) - Returns a merged array of structs in which the N-th struct contains all N-th values of input arrays. Examples: SELECT arrays_zip ( array ( 1 , 2 , 3 ), array ( 2 , 3 , 4 )); [ { 0 : 1 , 1 : 2 } , { 0 : 2 , 1 : 3 } , { 0 : 3 , 1 : 4 } ] SELECT arrays_zip ( array ( 1 , 2 ), array ( 2 , 3 ), array ( 3 , 4 )); [ { 0 : 1 , 1 : 2 , 2 : 3 } , { 0 : 2 , 1 : 3 , 2 : 4 } ] Since: 2.4.0","title":"arrays_zip"},{"location":"appendix-b/#from_json","text":"from_json(jsonStr, schema[, options]) - Returns a struct value with the given jsonStr and schema. Examples: SELECT from_json ( { a :1, b :0.8} , a INT, b DOUBLE ); { a : 1 , b : 0 . 8 } SELECT from_json ( { time : 26/08/2015 } , time Timestamp , map ( timestampFormat , dd/MM/yyyy )); { time : 2015-08-26 00:00:00.0 } Since: 2.2.0","title":"from_json"},{"location":"appendix-b/#to_json","text":"to_json(expr[, options]) - Returns a json string with a given struct value Examples: SELECT to_json ( named_struct ( a , 1 , b , 2 )); { a : 1 , b : 2 } SELECT to_json ( named_struct ( time , to_timestamp ( 2015-08-26 , yyyy-MM-dd )), map ( timestampFormat , dd/MM/yyyy )); { time : 26/08/2015 } SELECT to_json ( array ( named_struct ( a , 1 , b , 2 )); [ { a : 1 , b : 2 } ] SELECT to_json ( map ( a , named_struct ( b , 1 ))); { a : { b : 1 }} SELECT to_json ( map ( named_struct ( a , 1 ), named_struct ( b , 2 ))); { [1] : { b : 2 }} SELECT to_json ( map ( a , 1 )); { a : 1 } SELECT to_json ( array (( map ( a , 1 )))); [ { a : 1 } ] Since: 2.2.0","title":"to_json"},{"location":"appendix-b/#reference","text":"Spark SQL, Built-in Functions","title":"Reference"},{"location":"case/","text":"SQL Case Case 1 select * from girls where age between 18 and 24 and boyfriend = no Reference","title":"\u6848\u4f8b"},{"location":"case/#sql-case","text":"","title":"SQL Case"},{"location":"case/#case-1","text":"select * from girls where age between 18 and 24 and boyfriend = no","title":"Case 1"},{"location":"case/#reference","text":"","title":"Reference"},{"location":"catalyst/","text":"Catalyst Encoder a container of serde expressions in Dataset Serialize\u3001Deserialize ExpressionEncoder(only) RowEncoder(mapping convert external rows) InternalRow UnsafeRow(Tungsten) JoinedRow(Join) BaseGenericInternalRow GenericInternalRow SpecificInternalRow(modify) MutableUnsafeRow(update) TreeNode Expression QueryPlan LogicalPlan resolved\u3001canonicalized UnaryNode\u3001BinaryNode\u3001LeafNode\u3001Other SparkPlan UnaryExecNode\u3001BinaryExecNode\u3001LeafExecNode\u3001Other Rule Rule RuleExecutor Seq[Batch] Strategy Once FixedPoint Parser ANTLR(Lexer\u3001Parser)\uff1aAdaptive LL(*)\uff0cListener\u3001Visitor SQL\u3001Dataset\u3001DataFrame - AstBuilder - Unresolved LogicalPlan\uff08Relation\u3001Function\u3001Attribute\uff09 Analyzer Strategy\u3001Rule-Based Catalog\u3001Metastore\u3001Rule - semantically validates and transforms(resolving, removing, modifying) - Analyzed LogicalPlan Batch Strategy Rules Hints FixedPoint ResolveBroadcastHints\u3001ResolveCoalesceHints\u3001RemoveAllHints Simple Sanity Check Once LookupFunctions Substitution FixedPoint CTESubstitution\u3001WindowsSubstitution\u3001EliminateUnions\u3001SubstituteUnresolvedOrdinals Resolution FixedPoint ResolveTableValuedFunctions\u3001ResolveRelations\u3001ResolveReferences\u3001ResolveCreateNamedStruct\u3001ResolveDeserializer\u3001ResolveNewInstance\u3001ResolveUpCast\u3001ResolveGroupingAnalytics\u3001ResolvePivot\u3001ResolveOrdinalInOrderByAndGroupBy\u3001ResolveMissingReferences\u3001ExtractGenerator\u3001ResolveGenerate\u3001ResolveFunctions\u3001ResolveAliases\u3001ResolveSubquery\u3001ResolveWindowOrder\u3001ResolveWindowFrame\u3001ResolveNaturalAndUsingJoin\u3001ExtractWindowExpressions\u3001GlobalAggregates\u3001ResolveAggregateFunctions\u3001TimeWindowing\u3001ResolveInlineTables\u3001TypeCoercion.typeCoercionRules\u3001extendedResolutionRules Post-Hoc Resolution Once postHocResolutionRules View Once AliasViewChild Nondeterministic Once PullOutNondeterministic UDF Once HandleNullInputsForUDF FixNullability Once FixNullability ResolveTimeZone Once ResolveTimeZone Cleanup FixedPoint CleanupAliases Optimizer Analyzed LogicalPlan - RBO(Rule-Based Optimizer) - Optimized LogicalPlan Batch Strategy Rules Eliminate Distinct FixedPoint EliminateDistinct Finish Analysis Once EliminateSubqueryAliases\u3001EliminateView\u3001ReplaceExpressions\u3001ComputeCurrentTime\u3001GetCurrentDatabase\u3001RewriteDistinctAggregates\u3001ReplaceDeduplicateWithAggregate Union Once CombineUnions LocalRelation early FixedPoint ConvertToLocalRelation\u3001PropagateEmptyRelation Pullup Correlated Expressions Once PullupCorrelatedPredicates Subquery Once OptimizeSubqueries Replace Operators FixedPoint RewriteExceptAll\u3001RewriteIntersectAll\u3001ReplaceIntersectWithSemiJoin\u3001ReplaceExceptWithFilter\u3001ReplaceExceptWithAntiJoin\u3001ReplaceDistinctWithAggregate Aggregate FixedPoint RemoveLiteralFromGroupExpressions\u3001RemoveRepetitionFromGroupExpressions Join Reorder Once CostBasedJoinReorder Remove Redundant Sorts Once RemoveRedundantSorts Decimal Optimizations FixedPoint DecimalAggregates Object Expressions Optimization FixedPoint EliminateMapObjects\u3001CombineTypedFilters LocalRelation FixedPoint ConvertToLocalRelation\u3001PropagateEmptyRelation Extract PythonUDF From JoinCondition Once PullOutPythonUDFInJoinCondition Check Cartesian Products Once CheckCartesianProducts RewriteSubquery Once RewritePredicateSubquery\u3001ColumnPruning\u3001CollapseProject\u3001RemoveRedundantProject UpdateAttributeReferences Once UpdateNullabilityInAttributeReferences extendedOperatorOptimizationRules PushProjectionThroughUnion\u3001ReorderJoin\u3001EliminateOuterJoin\u3001PushPredicateThroughJoin\u3001PushDownPredicate\u3001LimitPushDown\u3001ColumnPruning\u3001CollapseRepartition\u3001CollapseProject\u3001CollapseWindow\u3001CombineFilters\u3001CombineLimits\u3001CombineUnions\u3001NullPropagation\u3001ConstantPropagation\u3001FoldablePropagation\u3001OptimizeIn\u3001ConstantFolding\u3001ReorderAssociativeOperator\u3001LikeSimplification\u3001BooleanSimplification\u3001SimplifyConditionals\u3001RemoveDispensableExpressions\u3001SimplifyBinaryComparison\u3001PruneFilters\u3001EliminateSorts\u3001SimplifyCasts\u3001SimplifyCaseConversionExpressions\u3001RewriteCorrelatedScalarSubquery\u3001EliminateSerialization\u3001RemoveRedundantAliases\u3001RemoveRedundantProject\u3001SimplifyExtractValueOps\u3001CombineConcats Non-Excludable PushProjectionThroughUnion\u3001EliminateDistinct\u3001EliminateSubqueryAliases\u3001EliminateView\u3001ReplaceExpressions\u3001ComputeCurrentTime\u3001GetCurrentDatabase\u3001RewriteDistinctAggregates\u3001ReplaceDeduplicateWithAggregate\u3001ReplaceIntersectWithSemiJoin\u3001ReplaceExceptWithFilter\u3001ReplaceExceptWithAntiJoin\u3001RewriteExceptAll\u3001RewriteIntersectAll\u3001ReplaceDistinctWithAggregate\u3001PullupCorrelatedPredicates\u3001RewriteCorrelatedScalarSubquery\u3001RewritePredicateSubquery\u3001PullOutPythonUDFInJoinCondition Planner Execution CBO\uff08Cost-Based Optimizer\uff09\uff1aShuffle\u3001Join SparkPlan\u3001SparkPlaner\u3001QueryExecution Distribution\u3001Partitioning\u3001SortOrder SparkPlanInfo(metadata\u3001metrics) SparkStrategy(Aggregation\u3001BasicOperators\u3001FlatMapGroupsWithStateStrategy\u3001InMemoryScans\u3001JoinSelection\u3001SpecialLimits\u3001StatefulAggregationStrategy\u3001StreamingDeduplicationStrategy\u3001StreamingRelationStrategy) Rule(CollapseCodegenStages\u3001PlanSubqueries\u3001ReuseSubquery\u3001ReuseExchange\u3001EnsureRequirements) Aggregation Aggregation Buffer(Schema\u3001Attributes) Partial\u3001PartialMerge\u3001Final\u3001Complete Window windowSpec : name=identifier #windowRef | ( name=identifier ) #windowRef | ( ( CLUSTER BY partition+=expression ( , partition+=expression)* | ((PARTITION | DISTRIBUTE) BY partition+=expression ( , partition+=expression)*)? ((ORDER | SORT) BY sortItem ( , sortItem)*)?) windowFrame? ) #windowDef ; windowFrame : frameType=RANGE start=frameBound | frameType=ROWS start=frameBound | frameType=RANGE BETWEEN start=frameBound AND end=frameBound | frameType=ROWS BETWEEN start=frameBound AND end=frameBound ; frameBound : UNBOUNDED boundType=(PRECEDING | FOLLOWING) | boundType=CURRENT ROW | expression boundType=(PRECEDING | FOLLOWING) ; Join joinRelation : (joinType) JOIN right=relationPrimary joinCriteria? | NATURAL joinType JOIN right=relationPrimary ; joinType : INNER? | CROSS | LEFT OUTER? | LEFT SEMI | RIGHT OUTER? | FULL OUTER? | LEFT? ANTI ; joinCriteria : ON booleanExpression | USING identifierList ; Tungsten Memory Management and Binary Processing Cache-aware computation(CPU L1/L2/L3: Cache Hit, Cache Locality) Code generation(Janino\u3001WholeStageCodegen) No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD Columnar in-memory columnar format Codegen/Janino/JIT HashAggregate BroadcastHashJoin SortMergeJoin RDDScan DataSourceScan WholeStageCodegen Hint Join\u3001Shuffle BROADCASTJOIN\u3001MAPJOIN\u3001STREAMTABLE\u3001INDEX\u3001COALESCE\u3001REPARTITION Statistics Table(sizeInBytes\u3001rowCount\u3001hints) Column(distinctCount\u3001min\u3001max\u3001nullCount\u3001avgLen\u3001maxLen\u3001histogram) Adapter Metadata Metrics Data Source Federation Partitions Transactional Vectorization(Pushdown) Parquet ORC CarbonData Session Application -1:n- Session(Context) -1:n- Job Share Cache Data Catalog Configuration View Function External Catalog Cache persist(StorageLevel.MEMORY_AND_DISK) Compression Cache tables in-memory columnar format Compression batchSize default 10000 ShuffleService Standalone Mode Executor Process Reference Spark SQL: Relational Data Processing in Spark Deep Dive into Spark SQL\u2019s Catalyst Optimizer Cost Based Optimizer in Apache Spark 2.2 Datasource V2 Series LL parser","title":"Catalyst"},{"location":"catalyst/#catalyst","text":"","title":"Catalyst"},{"location":"catalyst/#encoder","text":"a container of serde expressions in Dataset Serialize\u3001Deserialize ExpressionEncoder(only) RowEncoder(mapping convert external rows)","title":"Encoder"},{"location":"catalyst/#internalrow","text":"UnsafeRow(Tungsten) JoinedRow(Join) BaseGenericInternalRow GenericInternalRow SpecificInternalRow(modify) MutableUnsafeRow(update)","title":"InternalRow"},{"location":"catalyst/#treenode","text":"Expression QueryPlan LogicalPlan resolved\u3001canonicalized UnaryNode\u3001BinaryNode\u3001LeafNode\u3001Other SparkPlan UnaryExecNode\u3001BinaryExecNode\u3001LeafExecNode\u3001Other","title":"TreeNode"},{"location":"catalyst/#rule","text":"Rule RuleExecutor Seq[Batch] Strategy Once FixedPoint","title":"Rule"},{"location":"catalyst/#parser","text":"ANTLR(Lexer\u3001Parser)\uff1aAdaptive LL(*)\uff0cListener\u3001Visitor SQL\u3001Dataset\u3001DataFrame - AstBuilder - Unresolved LogicalPlan\uff08Relation\u3001Function\u3001Attribute\uff09","title":"Parser"},{"location":"catalyst/#analyzer","text":"Strategy\u3001Rule-Based Catalog\u3001Metastore\u3001Rule - semantically validates and transforms(resolving, removing, modifying) - Analyzed LogicalPlan Batch Strategy Rules Hints FixedPoint ResolveBroadcastHints\u3001ResolveCoalesceHints\u3001RemoveAllHints Simple Sanity Check Once LookupFunctions Substitution FixedPoint CTESubstitution\u3001WindowsSubstitution\u3001EliminateUnions\u3001SubstituteUnresolvedOrdinals Resolution FixedPoint ResolveTableValuedFunctions\u3001ResolveRelations\u3001ResolveReferences\u3001ResolveCreateNamedStruct\u3001ResolveDeserializer\u3001ResolveNewInstance\u3001ResolveUpCast\u3001ResolveGroupingAnalytics\u3001ResolvePivot\u3001ResolveOrdinalInOrderByAndGroupBy\u3001ResolveMissingReferences\u3001ExtractGenerator\u3001ResolveGenerate\u3001ResolveFunctions\u3001ResolveAliases\u3001ResolveSubquery\u3001ResolveWindowOrder\u3001ResolveWindowFrame\u3001ResolveNaturalAndUsingJoin\u3001ExtractWindowExpressions\u3001GlobalAggregates\u3001ResolveAggregateFunctions\u3001TimeWindowing\u3001ResolveInlineTables\u3001TypeCoercion.typeCoercionRules\u3001extendedResolutionRules Post-Hoc Resolution Once postHocResolutionRules View Once AliasViewChild Nondeterministic Once PullOutNondeterministic UDF Once HandleNullInputsForUDF FixNullability Once FixNullability ResolveTimeZone Once ResolveTimeZone Cleanup FixedPoint CleanupAliases","title":"Analyzer"},{"location":"catalyst/#optimizer","text":"Analyzed LogicalPlan - RBO(Rule-Based Optimizer) - Optimized LogicalPlan Batch Strategy Rules Eliminate Distinct FixedPoint EliminateDistinct Finish Analysis Once EliminateSubqueryAliases\u3001EliminateView\u3001ReplaceExpressions\u3001ComputeCurrentTime\u3001GetCurrentDatabase\u3001RewriteDistinctAggregates\u3001ReplaceDeduplicateWithAggregate Union Once CombineUnions LocalRelation early FixedPoint ConvertToLocalRelation\u3001PropagateEmptyRelation Pullup Correlated Expressions Once PullupCorrelatedPredicates Subquery Once OptimizeSubqueries Replace Operators FixedPoint RewriteExceptAll\u3001RewriteIntersectAll\u3001ReplaceIntersectWithSemiJoin\u3001ReplaceExceptWithFilter\u3001ReplaceExceptWithAntiJoin\u3001ReplaceDistinctWithAggregate Aggregate FixedPoint RemoveLiteralFromGroupExpressions\u3001RemoveRepetitionFromGroupExpressions Join Reorder Once CostBasedJoinReorder Remove Redundant Sorts Once RemoveRedundantSorts Decimal Optimizations FixedPoint DecimalAggregates Object Expressions Optimization FixedPoint EliminateMapObjects\u3001CombineTypedFilters LocalRelation FixedPoint ConvertToLocalRelation\u3001PropagateEmptyRelation Extract PythonUDF From JoinCondition Once PullOutPythonUDFInJoinCondition Check Cartesian Products Once CheckCartesianProducts RewriteSubquery Once RewritePredicateSubquery\u3001ColumnPruning\u3001CollapseProject\u3001RemoveRedundantProject UpdateAttributeReferences Once UpdateNullabilityInAttributeReferences extendedOperatorOptimizationRules PushProjectionThroughUnion\u3001ReorderJoin\u3001EliminateOuterJoin\u3001PushPredicateThroughJoin\u3001PushDownPredicate\u3001LimitPushDown\u3001ColumnPruning\u3001CollapseRepartition\u3001CollapseProject\u3001CollapseWindow\u3001CombineFilters\u3001CombineLimits\u3001CombineUnions\u3001NullPropagation\u3001ConstantPropagation\u3001FoldablePropagation\u3001OptimizeIn\u3001ConstantFolding\u3001ReorderAssociativeOperator\u3001LikeSimplification\u3001BooleanSimplification\u3001SimplifyConditionals\u3001RemoveDispensableExpressions\u3001SimplifyBinaryComparison\u3001PruneFilters\u3001EliminateSorts\u3001SimplifyCasts\u3001SimplifyCaseConversionExpressions\u3001RewriteCorrelatedScalarSubquery\u3001EliminateSerialization\u3001RemoveRedundantAliases\u3001RemoveRedundantProject\u3001SimplifyExtractValueOps\u3001CombineConcats Non-Excludable PushProjectionThroughUnion\u3001EliminateDistinct\u3001EliminateSubqueryAliases\u3001EliminateView\u3001ReplaceExpressions\u3001ComputeCurrentTime\u3001GetCurrentDatabase\u3001RewriteDistinctAggregates\u3001ReplaceDeduplicateWithAggregate\u3001ReplaceIntersectWithSemiJoin\u3001ReplaceExceptWithFilter\u3001ReplaceExceptWithAntiJoin\u3001RewriteExceptAll\u3001RewriteIntersectAll\u3001ReplaceDistinctWithAggregate\u3001PullupCorrelatedPredicates\u3001RewriteCorrelatedScalarSubquery\u3001RewritePredicateSubquery\u3001PullOutPythonUDFInJoinCondition","title":"Optimizer"},{"location":"catalyst/#planner-execution","text":"CBO\uff08Cost-Based Optimizer\uff09\uff1aShuffle\u3001Join SparkPlan\u3001SparkPlaner\u3001QueryExecution Distribution\u3001Partitioning\u3001SortOrder SparkPlanInfo(metadata\u3001metrics) SparkStrategy(Aggregation\u3001BasicOperators\u3001FlatMapGroupsWithStateStrategy\u3001InMemoryScans\u3001JoinSelection\u3001SpecialLimits\u3001StatefulAggregationStrategy\u3001StreamingDeduplicationStrategy\u3001StreamingRelationStrategy) Rule(CollapseCodegenStages\u3001PlanSubqueries\u3001ReuseSubquery\u3001ReuseExchange\u3001EnsureRequirements)","title":"Planner &amp; Execution"},{"location":"catalyst/#aggregation","text":"Aggregation Buffer(Schema\u3001Attributes) Partial\u3001PartialMerge\u3001Final\u3001Complete","title":"Aggregation"},{"location":"catalyst/#window","text":"windowSpec : name=identifier #windowRef | ( name=identifier ) #windowRef | ( ( CLUSTER BY partition+=expression ( , partition+=expression)* | ((PARTITION | DISTRIBUTE) BY partition+=expression ( , partition+=expression)*)? ((ORDER | SORT) BY sortItem ( , sortItem)*)?) windowFrame? ) #windowDef ; windowFrame : frameType=RANGE start=frameBound | frameType=ROWS start=frameBound | frameType=RANGE BETWEEN start=frameBound AND end=frameBound | frameType=ROWS BETWEEN start=frameBound AND end=frameBound ; frameBound : UNBOUNDED boundType=(PRECEDING | FOLLOWING) | boundType=CURRENT ROW | expression boundType=(PRECEDING | FOLLOWING) ;","title":"Window"},{"location":"catalyst/#join","text":"joinRelation : (joinType) JOIN right=relationPrimary joinCriteria? | NATURAL joinType JOIN right=relationPrimary ; joinType : INNER? | CROSS | LEFT OUTER? | LEFT SEMI | RIGHT OUTER? | FULL OUTER? | LEFT? ANTI ; joinCriteria : ON booleanExpression | USING identifierList ;","title":"Join"},{"location":"catalyst/#tungsten","text":"Memory Management and Binary Processing Cache-aware computation(CPU L1/L2/L3: Cache Hit, Cache Locality) Code generation(Janino\u3001WholeStageCodegen) No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD","title":"Tungsten"},{"location":"catalyst/#columnar","text":"in-memory columnar format","title":"Columnar"},{"location":"catalyst/#codegenjaninojit","text":"HashAggregate BroadcastHashJoin SortMergeJoin RDDScan DataSourceScan WholeStageCodegen","title":"Codegen/Janino/JIT"},{"location":"catalyst/#hint","text":"Join\u3001Shuffle BROADCASTJOIN\u3001MAPJOIN\u3001STREAMTABLE\u3001INDEX\u3001COALESCE\u3001REPARTITION","title":"Hint"},{"location":"catalyst/#statistics","text":"Table(sizeInBytes\u3001rowCount\u3001hints) Column(distinctCount\u3001min\u3001max\u3001nullCount\u3001avgLen\u3001maxLen\u3001histogram)","title":"Statistics"},{"location":"catalyst/#adapter","text":"Metadata Metrics","title":"Adapter"},{"location":"catalyst/#data-source","text":"Federation Partitions Transactional Vectorization(Pushdown) Parquet ORC CarbonData","title":"Data Source"},{"location":"catalyst/#session","text":"Application -1:n- Session(Context) -1:n- Job Share Cache Data","title":"Session"},{"location":"catalyst/#catalog","text":"Configuration View Function External Catalog","title":"Catalog"},{"location":"catalyst/#cache","text":"persist(StorageLevel.MEMORY_AND_DISK)","title":"Cache"},{"location":"catalyst/#compression","text":"Cache tables in-memory columnar format Compression batchSize default 10000","title":"Compression"},{"location":"catalyst/#shuffleservice","text":"Standalone Mode Executor Process","title":"ShuffleService"},{"location":"catalyst/#reference","text":"Spark SQL: Relational Data Processing in Spark Deep Dive into Spark SQL\u2019s Catalyst Optimizer Cost Based Optimizer in Apache Spark 2.2 Datasource V2 Series LL parser","title":"Reference"},{"location":"compute/","text":"\u8ba1\u7b97\uff08Compute\uff09 \u8ba1\u7b97\u6a21\u5f0f\uff08Pattern\uff09 MR\u3001MRM\uff08Map\u3001Reduce\u3001Merge\uff09 \u53ef\u679a\u4e3e\u6027\uff08Ad hoc\u3001OLAP\uff09\u3001\u53ef\u52a0\u6027\uff08\u6279\u91cf\u3001\u589e\u91cf \uff09 \u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09 RDD Characteristics \u5206\u5e03\uff08Partitions\uff09 \u672c\u5730\u5316\uff08PreferredLocations\uff09 \u4f9d\u8d56\uff08Dependencies\uff09 \u8fed\u4ee3\uff08Iterator\uff09 \u5206\u533a\uff08Partitioner\uff09 Operations Creation Transformation Storage Action Dependencies Narrow Dependencies Shuffle/Wide Dependencies Stage ResultStage ShuffleMapStage DAG Lineage Fault Tolerance Data Dependency Shuffle Read/Write Server/Client Pull/Push Tungsten Memory Management and Binary Processing Cache-aware computation Code generation No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD Reference Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing","title":"\u8ba1\u7b97"},{"location":"compute/#compute","text":"","title":"\u8ba1\u7b97\uff08Compute\uff09"},{"location":"compute/#pattern","text":"MR\u3001MRM\uff08Map\u3001Reduce\u3001Merge\uff09 \u53ef\u679a\u4e3e\u6027\uff08Ad hoc\u3001OLAP\uff09\u3001\u53ef\u52a0\u6027\uff08\u6279\u91cf\u3001\u589e\u91cf \uff09","title":"\u8ba1\u7b97\u6a21\u5f0f\uff08Pattern\uff09"},{"location":"compute/#constraint","text":"","title":"\u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09"},{"location":"compute/#rdd","text":"","title":"RDD"},{"location":"compute/#characteristics","text":"\u5206\u5e03\uff08Partitions\uff09 \u672c\u5730\u5316\uff08PreferredLocations\uff09 \u4f9d\u8d56\uff08Dependencies\uff09 \u8fed\u4ee3\uff08Iterator\uff09 \u5206\u533a\uff08Partitioner\uff09","title":"Characteristics"},{"location":"compute/#operations","text":"Creation Transformation Storage Action","title":"Operations"},{"location":"compute/#dependencies","text":"Narrow Dependencies Shuffle/Wide Dependencies","title":"Dependencies"},{"location":"compute/#stage","text":"ResultStage ShuffleMapStage","title":"Stage"},{"location":"compute/#dag","text":"Lineage Fault Tolerance Data Dependency","title":"DAG"},{"location":"compute/#shuffle","text":"Read/Write Server/Client Pull/Push","title":"Shuffle"},{"location":"compute/#tungsten","text":"Memory Management and Binary Processing Cache-aware computation Code generation No virtual function dispatches Intermediate data in memory vs CPU registers Loop unrolling and SIMD","title":"Tungsten"},{"location":"compute/#reference","text":"Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing","title":"Reference"},{"location":"knowledge/","text":"\u77e5\u8bc6\u9886\u57df Database \u5b58\u50a8\uff1a\u884c\u3001\u5217 \u7d22\u5f15\uff1aB+Tree\u3001MergeTree\u3001\u5012\u6392\u7d22\u5f15\u3001\u4f4d\u56fe \u67e5\u8be2\uff1a\u4f1a\u8bdd \u4f18\u5316 \u6545\u969c \u5e76\u53d1 \u4e8b\u52a1 \u7ba1\u7406 \u5206\u5e03\u5f0f Knowledge \u64cd\u4f5c\u7cfb\u7edf\uff1a\u8fdb\u7a0b\u3001\u8c03\u5ea6\u3001\u5185\u5b58\u3001\u6587\u4ef6\u3001IO \u7f51\u7edc\uff1aTCP\u3001RPC\u3001Akka\u3001Netty \u6570\u636e\u5e93\uff1a\u5173\u7cfb\u6a21\u578b\u3001SQL\u3001\u4e8b\u52a1\u3001\u7d22\u5f15 \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\uff1aRaft\u3001Hash\u3001Probability\u3001Heuristic Java/Scala\uff1aJVM\u3001JMM\u3001GC\u3001JIT \u5206\u5e03\u5f0f\uff1a\u5b58\u50a8\u3001\u8ba1\u7b97\u3001\u8c03\u5ea6\u3001\u7ba1\u7406\u3001\u65e5\u5fd7 Book Reference\uff1a \u6570\u636e\u5e93\u5185\u6838\u6708\u62a5 Computer Science Learning Notes OI Wiki \u5206\u5e03\u5f0f\u7cfb\u7edf \u8bfb\u540e\u611f \u5206\u5e03\u5f0f\u7cfb\u7edf\u5de5\u7a0b\u5b9e\u8df5","title":"\u77e5\u8bc6\u9886\u57df"},{"location":"knowledge/#_1","text":"","title":"\u77e5\u8bc6\u9886\u57df"},{"location":"knowledge/#database","text":"\u5b58\u50a8\uff1a\u884c\u3001\u5217 \u7d22\u5f15\uff1aB+Tree\u3001MergeTree\u3001\u5012\u6392\u7d22\u5f15\u3001\u4f4d\u56fe \u67e5\u8be2\uff1a\u4f1a\u8bdd \u4f18\u5316 \u6545\u969c \u5e76\u53d1 \u4e8b\u52a1 \u7ba1\u7406 \u5206\u5e03\u5f0f","title":"Database"},{"location":"knowledge/#knowledge","text":"\u64cd\u4f5c\u7cfb\u7edf\uff1a\u8fdb\u7a0b\u3001\u8c03\u5ea6\u3001\u5185\u5b58\u3001\u6587\u4ef6\u3001IO \u7f51\u7edc\uff1aTCP\u3001RPC\u3001Akka\u3001Netty \u6570\u636e\u5e93\uff1a\u5173\u7cfb\u6a21\u578b\u3001SQL\u3001\u4e8b\u52a1\u3001\u7d22\u5f15 \u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5\uff1aRaft\u3001Hash\u3001Probability\u3001Heuristic Java/Scala\uff1aJVM\u3001JMM\u3001GC\u3001JIT \u5206\u5e03\u5f0f\uff1a\u5b58\u50a8\u3001\u8ba1\u7b97\u3001\u8c03\u5ea6\u3001\u7ba1\u7406\u3001\u65e5\u5fd7","title":"Knowledge"},{"location":"knowledge/#book","text":"","title":"Book"},{"location":"knowledge/#reference","text":"\u6570\u636e\u5e93\u5185\u6838\u6708\u62a5 Computer Science Learning Notes OI Wiki \u5206\u5e03\u5f0f\u7cfb\u7edf \u8bfb\u540e\u611f \u5206\u5e03\u5f0f\u7cfb\u7edf\u5de5\u7a0b\u5b9e\u8df5","title":"Reference\uff1a"},{"location":"metrics/","text":"\u5ea6\u91cf\uff08Metrics\uff09 Listeners ListenerBus\u3001SparkListenerBus\u3001LiveListenerBus SparkListener\u3001SparkListenerEvent Environment\u3001Job\u3001Stage\u3001Task\u3001BlockManager\u3001Application\u3001Executor ... Source Master Applications Worker Executor Driver ShuffleService Sink ConsoleSink CSVSink JmxSink MetricsServlet GraphiteSink Slf4jSink StatsdSink Web UI REST API Applications Jobs Stages Executors Storage Environment Streaming SQL Reference Monitoring and Instrumentation Dr. Elephant Sparklint","title":"\u5ea6\u91cf"},{"location":"metrics/#metrics","text":"","title":"\u5ea6\u91cf\uff08Metrics\uff09"},{"location":"metrics/#listeners","text":"ListenerBus\u3001SparkListenerBus\u3001LiveListenerBus SparkListener\u3001SparkListenerEvent Environment\u3001Job\u3001Stage\u3001Task\u3001BlockManager\u3001Application\u3001Executor ...","title":"Listeners"},{"location":"metrics/#source","text":"Master Applications Worker Executor Driver ShuffleService","title":"Source"},{"location":"metrics/#sink","text":"ConsoleSink CSVSink JmxSink MetricsServlet GraphiteSink Slf4jSink StatsdSink","title":"Sink"},{"location":"metrics/#web-ui-rest-api","text":"Applications Jobs Stages Executors Storage Environment Streaming SQL","title":"Web UI &amp; REST API"},{"location":"metrics/#reference","text":"Monitoring and Instrumentation Dr. Elephant Sparklint","title":"Reference"},{"location":"network/","text":"\u7f51\u7edc\uff08Network\uff09 \u901a\u4fe1\u673a\u5236 RPC\uff08Remote Procedure Call\uff09\uff1aProtocol Buffer\u3001Thrift\u3001Avro\uff08IDL\u3001Serialization\uff09 Message\uff1aQueue\u3001Pub-Sub\uff08Pull\u3001Push\uff09 Multi Broadcast\uff1aGossip\uff08Best Effort\u3001Anti-Entropy \u3001Rumor Mongering\uff09 \u89d2\u8272\uff08Role\uff09 Master, Worker, Client, Driver, Executor RPC \u57fa\u4e8eNetty Context\uff08\u4e0a\u4e0b\u6587\uff1aLocal\u3001Remote\uff09 Env\uff08\u8fd0\u884c\u73af\u5883\uff09 Endpoint\uff08\u7ec8\u7aef\uff09 \u4e3b\u8981\u4f5c\u7528 \u6d88\u606f\u4e92\u901a\uff1aEvent\u3001Status \u6587\u4ef6\u4f20\u8f93\uff1aFetch\u3001Upload Block\uff1aStore\u3001Replication Shuffle\uff1aWriter\u3001Reader Reference \u4f53\u7cfb\u5316\u8ba4\u8bc6RPC \u6df1\u5165\u89e3\u6790Spark\u4e2d\u7684RPC","title":"\u7f51\u7edc"},{"location":"network/#network","text":"","title":"\u7f51\u7edc\uff08Network\uff09"},{"location":"network/#_1","text":"RPC\uff08Remote Procedure Call\uff09\uff1aProtocol Buffer\u3001Thrift\u3001Avro\uff08IDL\u3001Serialization\uff09 Message\uff1aQueue\u3001Pub-Sub\uff08Pull\u3001Push\uff09 Multi Broadcast\uff1aGossip\uff08Best Effort\u3001Anti-Entropy \u3001Rumor Mongering\uff09","title":"\u901a\u4fe1\u673a\u5236"},{"location":"network/#role","text":"Master, Worker, Client, Driver, Executor","title":"\u89d2\u8272\uff08Role\uff09"},{"location":"network/#rpc","text":"\u57fa\u4e8eNetty Context\uff08\u4e0a\u4e0b\u6587\uff1aLocal\u3001Remote\uff09 Env\uff08\u8fd0\u884c\u73af\u5883\uff09 Endpoint\uff08\u7ec8\u7aef\uff09","title":"RPC"},{"location":"network/#_2","text":"\u6d88\u606f\u4e92\u901a\uff1aEvent\u3001Status \u6587\u4ef6\u4f20\u8f93\uff1aFetch\u3001Upload Block\uff1aStore\u3001Replication Shuffle\uff1aWriter\u3001Reader","title":"\u4e3b\u8981\u4f5c\u7528"},{"location":"network/#reference","text":"\u4f53\u7cfb\u5316\u8ba4\u8bc6RPC \u6df1\u5165\u89e3\u6790Spark\u4e2d\u7684RPC","title":"Reference"},{"location":"projects-and-articles/","text":"Projects Articles Projects Impala Druid Kylin HAWQ Drill TiDB ClickHouse Doris(Palo) Tez Antlr4 : ANother Tool for Language Recognition. Calcite : Dynamic data management framework. Papers Spark SQL: Relational Data Processing in Spark Articles Resources Spark \u8bba\u6587\uff08\u5927\u578b\u96c6\u7fa4\u4e0a\u4e00\u79cd\u5feb\u901f\u548c\u901a\u7528\u6570\u636e\u5904\u7406\u67b6\u6784\uff09 Spark Internals Spark Internals\uff08\u4e2d\u6587\uff09 Spark\u6280\u672f\u5185\u5e55 Spark SQL\u6e90\u7801\u5206\u6790\u7cfb\u5217 Coolplay Spark\uff1a\u9177\u73a9 Spark: Spark \u6e90\u4ee3\u7801\u89e3\u6790\u3001Spark \u7c7b\u5e93\u7b49 Spark Graphx \u7684\u539f\u7406\u53ca\u76f8\u5173\u64cd\u4f5c\u7684\u6e90\u7801\u89e3\u6790 Spark ML Source Analysis\uff1aspark ml \u7b97\u6cd5\u539f\u7406\u5256\u6790\u4ee5\u53ca\u5177\u4f53\u7684\u6e90\u7801\u5b9e\u73b0\u5206\u6790 Spark \u7f16\u7a0b\u6307\u5357\u7b80\u4f53\u4e2d\u6587\u7248 Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3 Reference","title":"\u9879\u76ee\u4e0e\u6587\u7ae0"},{"location":"projects-and-articles/#projects-articles","text":"","title":"Projects &amp; Articles"},{"location":"projects-and-articles/#projects","text":"Impala Druid Kylin HAWQ Drill TiDB ClickHouse Doris(Palo) Tez Antlr4 : ANother Tool for Language Recognition. Calcite : Dynamic data management framework.","title":"Projects"},{"location":"projects-and-articles/#papers","text":"Spark SQL: Relational Data Processing in Spark","title":"Papers"},{"location":"projects-and-articles/#articles","text":"","title":"Articles"},{"location":"projects-and-articles/#resources","text":"Spark \u8bba\u6587\uff08\u5927\u578b\u96c6\u7fa4\u4e0a\u4e00\u79cd\u5feb\u901f\u548c\u901a\u7528\u6570\u636e\u5904\u7406\u67b6\u6784\uff09 Spark Internals Spark Internals\uff08\u4e2d\u6587\uff09 Spark\u6280\u672f\u5185\u5e55 Spark SQL\u6e90\u7801\u5206\u6790\u7cfb\u5217 Coolplay Spark\uff1a\u9177\u73a9 Spark: Spark \u6e90\u4ee3\u7801\u89e3\u6790\u3001Spark \u7c7b\u5e93\u7b49 Spark Graphx \u7684\u539f\u7406\u53ca\u76f8\u5173\u64cd\u4f5c\u7684\u6e90\u7801\u89e3\u6790 Spark ML Source Analysis\uff1aspark ml \u7b97\u6cd5\u539f\u7406\u5256\u6790\u4ee5\u53ca\u5177\u4f53\u7684\u6e90\u7801\u5b9e\u73b0\u5206\u6790 Spark \u7f16\u7a0b\u6307\u5357\u7b80\u4f53\u4e2d\u6587\u7248 Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3","title":"Resources"},{"location":"projects-and-articles/#reference","text":"","title":"Reference"},{"location":"relational-algebra/","text":"\u5173\u7cfb\u4ee3\u6570\uff08Relational Algebra\uff09 \u57fa\u7840\u8fd0\u7b97\uff08\u57fa\u7840\uff09 \u903b\u8f91\u8fd0\u7b97 \uff1a\u6216\uff08or \u2228 \uff09\u3001\u4e0e\uff08and \u2227 \uff09\u3001\u975e\uff08not \u00ac \uff09 \u6bd4\u8f83\u8fd0\u7b97 \uff1a\u5c0f\u4e8e\uff08 \uff09\u3001\u5c0f\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u5927\u4e8e\uff08 \uff09\u3001\u5927\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u7b49\u4e8e\uff08=\uff09\u3001\u4e0d\u7b49\u4e8e\uff08 \uff09 \u96c6\u5408\u8fd0\u7b97 \uff1a\u4ea4\uff08\u2229\uff09\u3001\u5e76\uff08\u222a\uff09\u3001\u5dee\uff08\u2212\uff09\u3001\u7b1b\u5361\u5c14\u79ef\uff08\u00d7\uff09 \u5173\u7cfb\u8fd0\u7b97\uff08\u91cd\u70b9\uff09 \u5173\u7cfb\u8fd0\u7b97 \uff1a\u9009\u62e9\uff08Selection \u03c3 \uff09\u3001\u6295\u5f71\uff08Projection \u03c0 \uff09\u3001\u8fde\u63a5\uff08Join \u22c8 \uff09\u3001\u9664\uff08\u00f7\uff09\u3001\u91cd\u547d\u540d\uff08\u03c1\uff09 \u805a\u96c6\u8fd0\u7b97\uff08\u6269\u5c55\uff09 \u805a\u96c6\u8fd0\u7b97 \uff1a\u6c42\u548c\uff08sum\uff09\u3001\u8ba1\u6570\uff08count\uff09\u3001\u5747\u503c\uff08avg\uff09\u3001\u6700\u5927\u503c\uff08max\uff09\u3001\u6700\u5c0f\u503c\uff08min\uff09 \u00b7 \u00b7 \u00b7 Reference \u5173\u7cfb\u4ee3\u6570","title":"\u5173\u7cfb\u4ee3\u6570"},{"location":"relational-algebra/#relational-algebra","text":"","title":"\u5173\u7cfb\u4ee3\u6570\uff08Relational Algebra\uff09"},{"location":"relational-algebra/#_1","text":"\u903b\u8f91\u8fd0\u7b97 \uff1a\u6216\uff08or \u2228 \uff09\u3001\u4e0e\uff08and \u2227 \uff09\u3001\u975e\uff08not \u00ac \uff09 \u6bd4\u8f83\u8fd0\u7b97 \uff1a\u5c0f\u4e8e\uff08 \uff09\u3001\u5c0f\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u5927\u4e8e\uff08 \uff09\u3001\u5927\u4e8e\u7b49\u4e8e\uff08 =\uff09\u3001\u7b49\u4e8e\uff08=\uff09\u3001\u4e0d\u7b49\u4e8e\uff08 \uff09 \u96c6\u5408\u8fd0\u7b97 \uff1a\u4ea4\uff08\u2229\uff09\u3001\u5e76\uff08\u222a\uff09\u3001\u5dee\uff08\u2212\uff09\u3001\u7b1b\u5361\u5c14\u79ef\uff08\u00d7\uff09","title":"\u57fa\u7840\u8fd0\u7b97\uff08\u57fa\u7840\uff09"},{"location":"relational-algebra/#_2","text":"\u5173\u7cfb\u8fd0\u7b97 \uff1a\u9009\u62e9\uff08Selection \u03c3 \uff09\u3001\u6295\u5f71\uff08Projection \u03c0 \uff09\u3001\u8fde\u63a5\uff08Join \u22c8 \uff09\u3001\u9664\uff08\u00f7\uff09\u3001\u91cd\u547d\u540d\uff08\u03c1\uff09","title":"\u5173\u7cfb\u8fd0\u7b97\uff08\u91cd\u70b9\uff09"},{"location":"relational-algebra/#_3","text":"\u805a\u96c6\u8fd0\u7b97 \uff1a\u6c42\u548c\uff08sum\uff09\u3001\u8ba1\u6570\uff08count\uff09\u3001\u5747\u503c\uff08avg\uff09\u3001\u6700\u5927\u503c\uff08max\uff09\u3001\u6700\u5c0f\u503c\uff08min\uff09 \u00b7 \u00b7 \u00b7","title":"\u805a\u96c6\u8fd0\u7b97\uff08\u6269\u5c55\uff09"},{"location":"relational-algebra/#reference","text":"\u5173\u7cfb\u4ee3\u6570","title":"Reference"},{"location":"relational-model/","text":"\u5173\u7cfb\u6a21\u578b\uff08Relational Model\uff09 \u5173\u7cfb\u6a21\u578b \uff08Relational Model\uff09\uff1a\u57fa\u4e8e \u8c13\u8bcd\u903b\u8f91 \u548c \u96c6\u5408\u8bba \u7684\u4e00\u79cd\u6570\u636e\u6a21\u578b\u3002 \u5173\u7cfb\u6a21\u578b \u7684\u57fa\u672c\u5047\u5b9a\u662f\u6240\u6709\u6570\u636e\u90fd\u8868\u793a\u4e3a\u6570\u5b66\u4e0a\u7684 \u5173\u7cfb \uff0c\u5c31\u662f\u8bf4 n \u4e2a\u96c6\u5408\u7684\u7b1b\u5361\u513f\u79ef\u7684\u4e00\u4e2a\u5b50\u96c6\uff1b\u6709\u5173\u8fd9\u79cd\u6570\u636e\u7684\u63a8\u7406\u901a\u8fc7\u4e8c\u503c\uff08\u5c31\u662f\u8bf4\u6ca1\u6709 NULL \uff09\u7684 \u8c13\u8bcd\u903b\u8f91 \u6765\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u6bcf\u4e2a\u547d\u9898\u90fd\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u8ce6\u503c\uff1a\u8981\u4e48\u662f\u771f\u8981\u4e48\u662f\u5047\u3002 \u6570\u636e\u901a\u8fc7 \u5173\u7cfb\u6f14\u7b97 \u548c \u5173\u7cfb\u4ee3\u6570 \u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\u3002 \u5173\u7cfb\u6f14\u7b97\uff08\u57fa\u4e8e \u8c13\u8bcd\u903b\u8f91 \uff09 \u5143\u7ec4\u5173\u7cfb\u6f14\u7b97\uff08\u884c\uff09 \u57df\u5173\u7cfb\u6f14\u7b97\uff08\u5217\uff09 \u5173\u7cfb\u4ee3\u6570\uff08\u57fa\u4e8e \u96c6\u5408\u8bba \uff09 Reference \u5173\u7cfb\u6a21\u578b","title":"\u5173\u7cfb\u6a21\u578b"},{"location":"relational-model/#relational-model","text":"\u5173\u7cfb\u6a21\u578b \uff08Relational Model\uff09\uff1a\u57fa\u4e8e \u8c13\u8bcd\u903b\u8f91 \u548c \u96c6\u5408\u8bba \u7684\u4e00\u79cd\u6570\u636e\u6a21\u578b\u3002 \u5173\u7cfb\u6a21\u578b \u7684\u57fa\u672c\u5047\u5b9a\u662f\u6240\u6709\u6570\u636e\u90fd\u8868\u793a\u4e3a\u6570\u5b66\u4e0a\u7684 \u5173\u7cfb \uff0c\u5c31\u662f\u8bf4 n \u4e2a\u96c6\u5408\u7684\u7b1b\u5361\u513f\u79ef\u7684\u4e00\u4e2a\u5b50\u96c6\uff1b\u6709\u5173\u8fd9\u79cd\u6570\u636e\u7684\u63a8\u7406\u901a\u8fc7\u4e8c\u503c\uff08\u5c31\u662f\u8bf4\u6ca1\u6709 NULL \uff09\u7684 \u8c13\u8bcd\u903b\u8f91 \u6765\u8fdb\u884c\uff0c\u8fd9\u610f\u5473\u7740\u5bf9\u6bcf\u4e2a\u547d\u9898\u90fd\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u8ce6\u503c\uff1a\u8981\u4e48\u662f\u771f\u8981\u4e48\u662f\u5047\u3002 \u6570\u636e\u901a\u8fc7 \u5173\u7cfb\u6f14\u7b97 \u548c \u5173\u7cfb\u4ee3\u6570 \u65b9\u5f0f\u8fdb\u884c\u64cd\u4f5c\u3002 \u5173\u7cfb\u6f14\u7b97\uff08\u57fa\u4e8e \u8c13\u8bcd\u903b\u8f91 \uff09 \u5143\u7ec4\u5173\u7cfb\u6f14\u7b97\uff08\u884c\uff09 \u57df\u5173\u7cfb\u6f14\u7b97\uff08\u5217\uff09 \u5173\u7cfb\u4ee3\u6570\uff08\u57fa\u4e8e \u96c6\u5408\u8bba \uff09","title":"\u5173\u7cfb\u6a21\u578b\uff08Relational Model\uff09"},{"location":"relational-model/#reference","text":"\u5173\u7cfb\u6a21\u578b","title":"Reference"},{"location":"relational-rule/","text":"\u5173\u7cfb\u5b9a\u5f8b\uff08Relational Rule\uff09 \u67e5\u8be2\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u6811\uff1a \u5185\u90e8\u8282\u70b9\u662f\u7b97\u5b50 \u53f6\u5b50\u662f\u5173\u7cfb \u5b50\u6811\u662f\u5b50\u8868\u8fbe\u5f0f \u4e3b\u8981\u76ee\u6807\u662f\u628a\u8868\u8fbe\u5f0f\u6811\u53d8\u6362\u6210\u7b49\u4ef7\u7684\u8868\u8fbe\u5f0f\u6811\uff0c\u4f7f\u5f97\u5728\u6811\u4e2d\u7684\u5b50\u8868\u8fbe\u5f0f\u751f\u6210\u7684\u5173\u7cfb\u7684\u5e73\u5747\u5927\u5c0f\u6bd4\u4f18\u5316\u524d\u66f4\u5c0f\u3002\u6b21\u8981\u76ee\u6807\u662f\u5728\u4e00\u4e2a\u5355\u4e00\u67e5\u8be2\u4e2d\uff0c\u6216\u5728\u8981\u540c\u65f6\u6c42\u503c\u591a\u4e8e\u4e00\u4e2a\u67e5\u8be2\u7684\u65f6\u5019\u7684\u6240\u6709\u8fd9\u4e9b\u67e5\u8be2\u4e2d\uff0c\u5c1d\u8bd5\u5f62\u6210\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u3002\u5728\u6b21\u8981\u76ee\u6807\u80cc\u540e\u7684\u539f\u7406\u662f\u8ba1\u7b97\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u4e00\u6b21\u5c31\u591f\u4e86\uff0c\u5176\u7ed3\u679c\u53ef\u4ee5\u7528\u4e8e\u5305\u542b\u8fd9\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u6240\u6709\u67e5\u8be2\u4e2d\u3002 Rule \u7ed3\u5408\u5f8b\u4e0e\u4ea4\u6362\u5f8b\uff1a\u987a\u5e8f\u65e0\u5173\u3001\u7ed3\u679c\u4e00\u81f4 \u9009\u62e9\uff08Selection \u03c3 \uff09\uff1a\u5e42\u7b49\u6027\u3001\u4ea4\u6362\u6027\uff0c\u5206\u89e3\u3001\u4e0b\u63a8 \u6295\u5f71\uff08Projection \u03c0 \uff09\uff1a\u5e42\u7b49\u6027\uff0c\u6d88\u9664\u3001\u4e0b\u63a8 \u8fde\u63a5\uff08Join \u22c8 \uff09\uff1a\u79ef\u3001\u4e0b\u63a8 \u91cd\u590d\uff1a\u6d88\u9664\u3001\u4e0b\u63a8 \u5206\u7ec4\u3001\u805a\u96c6\uff1a\u6d88\u9664 \u7ed3\u5408\u3001\u5206\u914d Evaluate \u4e2d\u95f4\u5173\u7cfb \u9009\u62e9\u8fd0\u7b97 \u6295\u5f71\u8fd0\u7b97 \u8fde\u63a5\u8fd0\u7b97\uff1a\u591a\u8fde\u63a5\u3001\u591a\u5173\u7cfb \u4ea4\u3001\u5e76\u3001\u5dee \u6d88\u9664\u91cd\u590d \u5206\u7ec4\u3001\u805a\u96c6 Reference \u5173\u7cfb\u4ee3\u6570","title":"\u5173\u7cfb\u5b9a\u5f8b"},{"location":"relational-rule/#relational-rule","text":"\u67e5\u8be2\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u4e2a\u6811\uff1a \u5185\u90e8\u8282\u70b9\u662f\u7b97\u5b50 \u53f6\u5b50\u662f\u5173\u7cfb \u5b50\u6811\u662f\u5b50\u8868\u8fbe\u5f0f \u4e3b\u8981\u76ee\u6807\u662f\u628a\u8868\u8fbe\u5f0f\u6811\u53d8\u6362\u6210\u7b49\u4ef7\u7684\u8868\u8fbe\u5f0f\u6811\uff0c\u4f7f\u5f97\u5728\u6811\u4e2d\u7684\u5b50\u8868\u8fbe\u5f0f\u751f\u6210\u7684\u5173\u7cfb\u7684\u5e73\u5747\u5927\u5c0f\u6bd4\u4f18\u5316\u524d\u66f4\u5c0f\u3002\u6b21\u8981\u76ee\u6807\u662f\u5728\u4e00\u4e2a\u5355\u4e00\u67e5\u8be2\u4e2d\uff0c\u6216\u5728\u8981\u540c\u65f6\u6c42\u503c\u591a\u4e8e\u4e00\u4e2a\u67e5\u8be2\u7684\u65f6\u5019\u7684\u6240\u6709\u8fd9\u4e9b\u67e5\u8be2\u4e2d\uff0c\u5c1d\u8bd5\u5f62\u6210\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u3002\u5728\u6b21\u8981\u76ee\u6807\u80cc\u540e\u7684\u539f\u7406\u662f\u8ba1\u7b97\u516c\u5171\u5b50\u8868\u8fbe\u5f0f\u4e00\u6b21\u5c31\u591f\u4e86\uff0c\u5176\u7ed3\u679c\u53ef\u4ee5\u7528\u4e8e\u5305\u542b\u8fd9\u4e2a\u5b50\u8868\u8fbe\u5f0f\u7684\u6240\u6709\u67e5\u8be2\u4e2d\u3002","title":"\u5173\u7cfb\u5b9a\u5f8b\uff08Relational Rule\uff09"},{"location":"relational-rule/#rule","text":"\u7ed3\u5408\u5f8b\u4e0e\u4ea4\u6362\u5f8b\uff1a\u987a\u5e8f\u65e0\u5173\u3001\u7ed3\u679c\u4e00\u81f4 \u9009\u62e9\uff08Selection \u03c3 \uff09\uff1a\u5e42\u7b49\u6027\u3001\u4ea4\u6362\u6027\uff0c\u5206\u89e3\u3001\u4e0b\u63a8 \u6295\u5f71\uff08Projection \u03c0 \uff09\uff1a\u5e42\u7b49\u6027\uff0c\u6d88\u9664\u3001\u4e0b\u63a8 \u8fde\u63a5\uff08Join \u22c8 \uff09\uff1a\u79ef\u3001\u4e0b\u63a8 \u91cd\u590d\uff1a\u6d88\u9664\u3001\u4e0b\u63a8 \u5206\u7ec4\u3001\u805a\u96c6\uff1a\u6d88\u9664 \u7ed3\u5408\u3001\u5206\u914d","title":"Rule"},{"location":"relational-rule/#evaluate","text":"\u4e2d\u95f4\u5173\u7cfb \u9009\u62e9\u8fd0\u7b97 \u6295\u5f71\u8fd0\u7b97 \u8fde\u63a5\u8fd0\u7b97\uff1a\u591a\u8fde\u63a5\u3001\u591a\u5173\u7cfb \u4ea4\u3001\u5e76\u3001\u5dee \u6d88\u9664\u91cd\u590d \u5206\u7ec4\u3001\u805a\u96c6","title":"Evaluate"},{"location":"relational-rule/#reference","text":"\u5173\u7cfb\u4ee3\u6570","title":"Reference"},{"location":"schedule/","text":"\u8c03\u5ea6\uff08Schedule\uff09 \u8d44\u6e90\uff08Resource\uff09 \u8ba1\u7b97\uff08CPU\u3001GPU\uff09 I/O\uff08Memory\u3001Disk \u3001Network\u3001RAID\u3001HBA\uff09 \u5bb9\u5668\uff08Container\uff09 \u8d44\u6e90\u9694\u79bb\uff08Resource Isolation \uff09 \u751f\u547d\u5468\u671f\uff08Life Cycle\uff09 \u8d44\u6e90\u5206\u914d\uff08Allocation\uff09 \u5168\u91cf\uff08Gang \uff09 \u589e\u91cf\uff08Incremental \uff09 \u8c03\u5ea6\u7b56\u7565\uff08Strategy\uff09 FIFO Capacity Fair Delay DRF\uff08Domainant Reource Fair\uff09 \u8c03\u5ea6\u7b97\u6cd5\uff08Algorithm\uff09 First Fitness \u80cc\u5305\u95ee\u9898\uff1a\u8d2a\u5fc3\u7b97\u6cd5 \u89c4\u5212\u95ee\u9898\uff1a\u6574\u6570\u89c4\u5212 Graph Base\uff08Firmament\uff09 \u5f3a\u5316\u5b66\u4e60 \u8c03\u5ea6\u6a21\u578b\uff08Pattern\uff09 \u8d44\u6e90\uff08Yarn\u3001Mesos\u3001Kubernetes\uff09 \u4f5c\u4e1a\uff08Oozie\u3001Airflow\u3001Azkaban\uff09 \u4efb\u52a1\uff08Spark\u3001TEZ\u3001Presto\uff09 \u8c03\u5ea6\u67b6\u6784\uff08Architecture\uff09 \u96c6\u4e2d\u8c03\u5ea6\uff08Monolithic \uff09 \u4e24\u7ea7\u8c03\u5ea6\uff08Two Level \uff09 \u5171\u4eab\u72b6\u6001\u8c03\u5ea6\uff08Shared State \uff09 \u5168\u5206\u5e03\u5f0f\u8c03\u5ea6 \u6df7\u5408\u8c03\u5ea6 \u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09 \u8d44\u6e90\u5f02\u8d28\u6027\u3001\u8d1f\u8f7d\u5f02\u8d28\u6027\u3001\u4eb2\u548c\u4e0e\u53cd\u4eb2\u548c\u3001\u6570\u636e\u4f9d\u8d56\u3001\u6570\u636e\u672c\u5730\u6027\u3001\u8d44\u6e90\u5229\u7528\u7387\u3001\u8d44\u6e90\u9694\u79bb\u3001\u516c\u5e73\u6027\u3001\u4f18\u5148\u7ea7\u3001SLA\u3001\u9965\u997f\u4e0e\u6d3b\u9501\u3001\u5bb9\u9519 Reference\uff1a Scheduler Architectures Firmament: Fast, Centralized Cluster Scheduling at Scale","title":"\u8c03\u5ea6"},{"location":"schedule/#schedule","text":"","title":"\u8c03\u5ea6\uff08Schedule\uff09"},{"location":"schedule/#resource","text":"\u8ba1\u7b97\uff08CPU\u3001GPU\uff09 I/O\uff08Memory\u3001Disk \u3001Network\u3001RAID\u3001HBA\uff09","title":"\u8d44\u6e90\uff08Resource\uff09"},{"location":"schedule/#container","text":"\u8d44\u6e90\u9694\u79bb\uff08Resource Isolation \uff09 \u751f\u547d\u5468\u671f\uff08Life Cycle\uff09","title":"\u5bb9\u5668\uff08Container\uff09"},{"location":"schedule/#allocation","text":"\u5168\u91cf\uff08Gang \uff09 \u589e\u91cf\uff08Incremental \uff09","title":"\u8d44\u6e90\u5206\u914d\uff08Allocation\uff09"},{"location":"schedule/#strategy","text":"FIFO Capacity Fair Delay DRF\uff08Domainant Reource Fair\uff09","title":"\u8c03\u5ea6\u7b56\u7565\uff08Strategy\uff09"},{"location":"schedule/#algorithm","text":"First Fitness \u80cc\u5305\u95ee\u9898\uff1a\u8d2a\u5fc3\u7b97\u6cd5 \u89c4\u5212\u95ee\u9898\uff1a\u6574\u6570\u89c4\u5212 Graph Base\uff08Firmament\uff09 \u5f3a\u5316\u5b66\u4e60","title":"\u8c03\u5ea6\u7b97\u6cd5\uff08Algorithm\uff09"},{"location":"schedule/#pattern","text":"\u8d44\u6e90\uff08Yarn\u3001Mesos\u3001Kubernetes\uff09 \u4f5c\u4e1a\uff08Oozie\u3001Airflow\u3001Azkaban\uff09 \u4efb\u52a1\uff08Spark\u3001TEZ\u3001Presto\uff09","title":"\u8c03\u5ea6\u6a21\u578b\uff08Pattern\uff09"},{"location":"schedule/#architecture","text":"\u96c6\u4e2d\u8c03\u5ea6\uff08Monolithic \uff09 \u4e24\u7ea7\u8c03\u5ea6\uff08Two Level \uff09 \u5171\u4eab\u72b6\u6001\u8c03\u5ea6\uff08Shared State \uff09 \u5168\u5206\u5e03\u5f0f\u8c03\u5ea6 \u6df7\u5408\u8c03\u5ea6","title":"\u8c03\u5ea6\u67b6\u6784\uff08Architecture\uff09"},{"location":"schedule/#constraint","text":"\u8d44\u6e90\u5f02\u8d28\u6027\u3001\u8d1f\u8f7d\u5f02\u8d28\u6027\u3001\u4eb2\u548c\u4e0e\u53cd\u4eb2\u548c\u3001\u6570\u636e\u4f9d\u8d56\u3001\u6570\u636e\u672c\u5730\u6027\u3001\u8d44\u6e90\u5229\u7528\u7387\u3001\u8d44\u6e90\u9694\u79bb\u3001\u516c\u5e73\u6027\u3001\u4f18\u5148\u7ea7\u3001SLA\u3001\u9965\u997f\u4e0e\u6d3b\u9501\u3001\u5bb9\u9519","title":"\u7ea6\u675f\u6761\u4ef6\uff08Constraint\uff09"},{"location":"schedule/#reference","text":"Scheduler Architectures Firmament: Fast, Centralized Cluster Scheduling at Scale","title":"Reference\uff1a"},{"location":"storage/","text":"\u5b58\u50a8\uff08Storage\uff09 \u5b58\u50a8\u7ea7\u522b\uff08Storage Level\uff09 Disk Memory OffHeap(Unsafe\u3001Zero-copy) Serialization Replication \u64cd\u4f5c\uff08Operation\uff09 LRU(Least Recently Used) Cache(persist(StorageLevel.MEMORY_AND_DISK)) Persist(persist/unPersist/destroy) Checkpoint \u5b58\u50a8\uff08Store\uff09 Disk Memory(OnHeap/OffHeap) \u7edf\u4e00\u5185\u5b58\u7ba1\u7406\uff08Unified Memory Management\uff09 Execution Storage \u4f1a\u8bdd\uff08Session\uff09 Metastore Local Session Global Session \u6d17\u724c\uff08Shuffle\uff09 Read/Write Server/Client Pull/Push \u5b58\u50a8\u683c\u5f0f\uff08Storage Format\uff09 ORC Parquet CarbonData Reference Apache Spark \u5185\u5b58\u7ba1\u7406\u8be6\u89e3 Spark Storage \u2460 - Spark Storage \u6a21\u5757\u6574\u4f53\u67b6\u6784 Spark Storage \u2461 - BlockManager \u7684\u521b\u5efa\u4e0e\u6ce8\u518c Spark Storage \u2462 - Master \u4e0e Slave \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u4e0e\u65f6\u673a Spark Storage \u2463 - \u5b58\u50a8\u6267\u884c\u7c7b\u4ecb\u7ecd\uff08DiskBlockManager\u3001DiskStore\u3001MemoryStore\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0a\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0b\uff09","title":"\u5b58\u50a8"},{"location":"storage/#storage","text":"","title":"\u5b58\u50a8\uff08Storage\uff09"},{"location":"storage/#storage-level","text":"Disk Memory OffHeap(Unsafe\u3001Zero-copy) Serialization Replication","title":"\u5b58\u50a8\u7ea7\u522b\uff08Storage Level\uff09"},{"location":"storage/#operation","text":"LRU(Least Recently Used) Cache(persist(StorageLevel.MEMORY_AND_DISK)) Persist(persist/unPersist/destroy) Checkpoint","title":"\u64cd\u4f5c\uff08Operation\uff09"},{"location":"storage/#store","text":"Disk Memory(OnHeap/OffHeap)","title":"\u5b58\u50a8\uff08Store\uff09"},{"location":"storage/#unified-memory-management","text":"Execution Storage","title":"\u7edf\u4e00\u5185\u5b58\u7ba1\u7406\uff08Unified Memory Management\uff09"},{"location":"storage/#session","text":"Metastore Local Session Global Session","title":"\u4f1a\u8bdd\uff08Session\uff09"},{"location":"storage/#shuffle","text":"Read/Write Server/Client Pull/Push","title":"\u6d17\u724c\uff08Shuffle\uff09"},{"location":"storage/#storage-format","text":"ORC Parquet CarbonData","title":"\u5b58\u50a8\u683c\u5f0f\uff08Storage Format\uff09"},{"location":"storage/#reference","text":"Apache Spark \u5185\u5b58\u7ba1\u7406\u8be6\u89e3 Spark Storage \u2460 - Spark Storage \u6a21\u5757\u6574\u4f53\u67b6\u6784 Spark Storage \u2461 - BlockManager \u7684\u521b\u5efa\u4e0e\u6ce8\u518c Spark Storage \u2462 - Master \u4e0e Slave \u4e4b\u95f4\u7684\u6d88\u606f\u4f20\u9012\u4e0e\u65f6\u673a Spark Storage \u2463 - \u5b58\u50a8\u6267\u884c\u7c7b\u4ecb\u7ecd\uff08DiskBlockManager\u3001DiskStore\u3001MemoryStore\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0a\uff09 Spark \u5185\u5b58\u7ba1\u7406\u7684\u524d\u4e16\u4eca\u751f\uff08\u4e0b\uff09","title":"Reference"},{"location":"tuning/","text":"SQL Tuning Configuration Design Program Dependency Boundary Reference Tuning Spark","title":"\u8c03\u4f18"},{"location":"tuning/#sql-tuning","text":"","title":"SQL Tuning"},{"location":"tuning/#configuration","text":"","title":"Configuration"},{"location":"tuning/#design-program","text":"","title":"Design &amp; Program"},{"location":"tuning/#dependency-boundary","text":"","title":"Dependency &amp; Boundary"},{"location":"tuning/#reference","text":"Tuning Spark","title":"Reference"},{"location":"work-and-practices/","text":"Work Practices ETL DW Tuning Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3 Optimizer RBO(Rule) CBO(Cost) HBO(History) ABO(Adaptive) Data Governance\uff08Table Column - Lineage Impact - Data Graph\uff09 Atlas Sentry WhereHows Spline Performance\uff08Metrics\u3001Heuristics\uff09 Dr. Elephant Sparklint SparkOscope Sparklens SparkMeasure DRIVEN Reference","title":"\u5de5\u4f5c\u4e0e\u5b9e\u8df5"},{"location":"work-and-practices/#work-practices","text":"","title":"Work &amp; Practices"},{"location":"work-and-practices/#etl-dw","text":"","title":"ETL &amp; DW"},{"location":"work-and-practices/#tuning","text":"Spark \u6027\u80fd\u8c03\u4f18\u603b\u7ed3","title":"Tuning"},{"location":"work-and-practices/#optimizer","text":"RBO(Rule) CBO(Cost) HBO(History) ABO(Adaptive)","title":"Optimizer"},{"location":"work-and-practices/#data-governancetable-column-lineage-impact-data-graph","text":"Atlas Sentry WhereHows Spline","title":"Data Governance\uff08Table &amp; Column -&gt; Lineage &amp; Impact -&gt; Data Graph\uff09"},{"location":"work-and-practices/#performancemetricsheuristics","text":"Dr. Elephant Sparklint SparkOscope Sparklens SparkMeasure DRIVEN","title":"Performance\uff08Metrics\u3001Heuristics\uff09"},{"location":"work-and-practices/#reference","text":"","title":"Reference"}]}